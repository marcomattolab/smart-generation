{
    "pipes": [],
    "interfaces": [
        {
            "name": "ConfigSchema",
            "id": "interface-ConfigSchema-45624fd2ec5a629d29888476e889503c467108bbb5ea80767795369304bc2ddffb43644f483efe62e3c5676c9081af9795cb753f3afdb53861f3352f82ee3240",
            "file": "src/app/services/plugin-registry.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Plugin {\n    id: string;\n    name: string;\n    icon: string;\n    version: string;\n    category: string;\n    description: string;\n    tags: string[];\n    enabled: boolean;\n    configSchema: ConfigSchema;\n}\n\nexport interface ConfigSchema {\n    title: string;\n    fields: Field[];\n}\n\nexport interface Field {\n    name: string;\n    label: string;\n    type: string;\n    options?: any[] | any;\n    default?: any;\n    description?: string;\n    min?: number;\n    max?: number;\n}\n\nexport const pluginRegistry: { [key: string]: Plugin } = {\n    // Backend Plugins\n    'spring-boot-oauth2': {\n        id: 'spring-boot-oauth2',\n        name: 'Spring Boot + OAuth2',\n        icon: '‚òï',\n        version: '3.2.0',\n        category: 'backend',\n        description: 'Complete Spring Boot setup with OAuth2 security, JWT tokens, and enterprise-grade authentication.',\n        tags: ['java', 'spring', 'oauth2', 'security'],\n        enabled: true,\n        configSchema: {\n            title: 'Spring Boot Configuration',\n            fields: [\n                {\n                    name: 'javaVersion',\n                    label: 'Java Version',\n                    type: 'select',\n                    options: ['11', '17', '21'],\n                    default: '17',\n                    description: 'Select the Java version for your project'\n                },\n                {\n                    name: 'springBootVersion',\n                    label: 'Spring Boot Version',\n                    type: 'select',\n                    options: ['3.0.x', '3.1.x', '3.2.x'],\n                    default: '3.2.x'\n                },\n                {\n                    name: 'includeSwagger',\n                    label: 'Include Swagger Documentation',\n                    type: 'checkbox',\n                    default: true,\n                    description: 'Generate OpenAPI 3.0 documentation with Swagger UI'\n                },\n                {\n                    name: 'oauthProvider',\n                    label: 'OAuth2 Provider',\n                    type: 'radio',\n                    options: [\n                        { value: 'keycloak', label: 'Keycloak' },\n                        { value: 'auth0', label: 'Auth0' },\n                        { value: 'azure-ad', label: 'Azure AD' },\n                        { value: 'google', label: 'Google OAuth' }\n                    ],\n                    default: 'keycloak'\n                },\n                {\n                    name: 'maxConnections',\n                    label: 'Max Database Connections',\n                    type: 'range',\n                    min: 5,\n                    max: 100,\n                    default: 20,\n                    description: 'Maximum number of database connections in the pool'\n                }\n            ]\n        }\n    },\n    'node-express-jwt': {\n        id: 'node-express-jwt',\n        name: 'Node.js + Express + JWT',\n        icon: 'üü¢',\n        version: '18.0.0',\n        category: 'backend',\n        description: 'Modern Node.js backend with Express framework, JWT authentication, and TypeScript support.',\n        tags: ['nodejs', 'express', 'jwt', 'typescript'],\n        enabled: false,\n        configSchema: {\n            title: 'Node.js Configuration',\n            fields: [\n                {\n                    name: 'nodeVersion',\n                    label: 'Node.js Version',\n                    type: 'select',\n                    options: ['16.x', '18.x', '20.x'],\n                    default: '18.x'\n                },\n                {\n                    name: 'useTypeScript',\n                    label: 'Use TypeScript',\n                    type: 'checkbox',\n                    default: true,\n                    description: 'Enable TypeScript for better type safety'\n                },\n                {\n                    name: 'jwtSecret',\n                    label: 'JWT Secret Key',\n                    type: 'text',\n                    default: 'your-super-secret-jwt-key',\n                    description: 'Secret key for JWT token signing'\n                }\n            ]\n        }\n    },\n    // Frontend Plugins\n    'react-material-ui': {\n        id: 'react-material-ui',\n        name: 'React + Material-UI',\n        icon: '‚öõÔ∏è',\n        version: '18.2.0',\n        category: 'frontend',\n        description: 'React application with Material-UI components, Redux Toolkit, and modern development setup.',\n        tags: ['react', 'material-ui', 'redux', 'typescript'],\n        enabled: true,\n        configSchema: {\n            title: 'React Configuration',\n            fields: [\n                {\n                    name: 'reactVersion',\n                    label: 'React Version',\n                    type: 'select',\n                    options: ['17.x', '18.x'],\n                    default: '18.x'\n                },\n                {\n                    name: 'useTypeScript',\n                    label: 'Use TypeScript',\n                    type: 'checkbox',\n                    default: true\n                },\n                {\n                    name: 'stateManagement',\n                    label: 'State Management',\n                    type: 'radio',\n                    options: [\n                        { value: 'redux-toolkit', label: 'Redux Toolkit' },\n                        { value: 'zustand', label: 'Zustand' },\n                        { value: 'context', label: 'React Context' }\n                    ],\n                    default: 'redux-toolkit'\n                },\n                {\n                    name: 'theme',\n                    label: 'UI Theme',\n                    type: 'select',\n                    options: ['light', 'dark', 'auto'],\n                    default: 'auto',\n                    description: 'Default theme for the application'\n                }\n            ]\n        }\n    },\n    'angular-bootstrap': {\n        id: 'angular-bootstrap',\n        name: 'Angular + Bootstrap',\n        icon: 'üÖ∞Ô∏è',\n        version: '17.0.0',\n        category: 'frontend',\n        description: 'Angular application with Bootstrap styling, Angular Material, and enterprise-grade architecture.',\n        tags: ['angular', 'bootstrap', 'material', 'typescript'],\n        enabled: false,\n        configSchema: {\n            title: 'Angular Configuration',\n            fields: [\n                {\n                    name: 'angularVersion',\n                    label: 'Angular Version',\n                    type: 'select',\n                    options: ['15.x', '16.x', '17.x'],\n                    default: '17.x'\n                },\n                {\n                    name: 'includeAngularMaterial',\n                    label: 'Include Angular Material',\n                    type: 'checkbox',\n                    default: true\n                },\n                {\n                    name: 'routingStrategy',\n                    label: 'Routing Strategy',\n                    type: 'radio',\n                    options: [\n                        { value: 'hash', label: 'Hash Location Strategy' },\n                        { value: 'path', label: 'Path Location Strategy' }\n                    ],\n                    default: 'path'\n                }\n            ]\n        }\n    },\n    // Database Plugins\n    'postgresql-config': {\n        id: 'postgresql-config',\n        name: 'PostgreSQL Database',\n        icon: 'üêò',\n        version: '15.0',\n        category: 'database',\n        description: 'PostgreSQL database with connection pooling, migrations, and performance optimization.',\n        tags: ['postgresql', 'database', 'sql', 'migrations'],\n        enabled: true,\n        configSchema: {\n            title: 'PostgreSQL Configuration',\n            fields: [\n                {\n                    name: 'version',\n                    label: 'PostgreSQL Version',\n                    type: 'select',\n                    options: ['13.x', '14.x', '15.x', '16.x'],\n                    default: '15.x'\n                },\n                {\n                    name: 'enableSSL',\n                    label: 'Enable SSL Connection',\n                    type: 'checkbox',\n                    default: true,\n                    description: 'Use SSL for database connections in production'\n                },\n                {\n                    name: 'maxConnections',\n                    label: 'Max Connection Pool Size',\n                    type: 'range',\n                    min: 5,\n                    max: 50,\n                    default: 20\n                },\n                {\n                    name: 'backupSchedule',\n                    label: 'Backup Schedule',\n                    type: 'select',\n                    options: ['daily', 'weekly', 'monthly', 'disabled'],\n                    default: 'daily',\n                    description: 'Automated backup schedule'\n                }\n            ]\n        }\n    },\n    // DevOps Plugins\n    'docker-compose': {\n        id: 'docker-compose',\n        name: 'Docker + Compose',\n        icon: 'üê≥',\n        version: '24.0',\n        category: 'devops',\n        description: 'Complete Docker setup with multi-stage builds, compose configurations, and production optimization.',\n        tags: ['docker', 'containerization', 'devops'],\n        enabled: true,\n        configSchema: {\n            title: 'Docker Configuration',\n            fields: [\n                {\n                    name: 'baseImage',\n                    label: 'Base Image',\n                    type: 'select',\n                    options: ['alpine', 'ubuntu', 'debian'],\n                    default: 'alpine',\n                    description: 'Base Docker image for containers'\n                },\n                {\n                    name: 'multiStage',\n                    label: 'Multi-stage Build',\n                    type: 'checkbox',\n                    default: true,\n                    description: 'Use multi-stage builds for smaller production images'\n                },\n                {\n                    name: 'includeNginx',\n                    label: 'Include Nginx Reverse Proxy',\n                    type: 'checkbox',\n                    default: true\n                }\n            ]\n        }\n    },\n    'gitlab-ci': {\n        id: 'gitlab-ci',\n        name: 'GitLab CI/CD',\n        icon: 'ü¶ä',\n        version: '16.0',\n        category: 'devops',\n        description: 'GitLab CI/CD pipeline with automated testing, building, and deployment stages.',\n        tags: ['gitlab', 'cicd', 'automation', 'deployment'],\n        enabled: true,\n        configSchema: {\n            title: 'GitLab CI/CD Configuration',\n            fields: [\n                {\n                    name: 'stages',\n                    label: 'Pipeline Stages',\n                    type: 'checkbox',\n                    options: [\n                        { value: 'test', label: 'Test', default: true },\n                        { value: 'build', label: 'Build', default: true },\n                        { value: 'security-scan', label: 'Security Scan', default: true },\n                        { value: 'deploy-staging', label: 'Deploy to Staging', default: true },\n                        { value: 'deploy-prod', label: 'Deploy to Production', default: false }\n                    ]\n                },\n                {\n                    name: 'deploymentStrategy',\n                    label: 'Deployment Strategy',\n                    type: 'radio',\n                    options: [\n                        { value: 'blue-green', label: 'Blue-Green Deployment' },\n                        { value: 'rolling', label: 'Rolling Update' },\n                        { value: 'canary', label: 'Canary Deployment' }\n                    ],\n                    default: 'rolling'\n                },\n                {\n                    name: 'notificationChannel',\n                    label: 'Notification Channel',\n                    type: 'text',\n                    default: '#deployments',\n                    description: 'Slack channel for deployment notifications'\n                }\n            ]\n        }\n    },\n    // Security Plugins\n    'sonarqube-analysis': {\n        id: 'sonarqube-analysis',\n        name: 'SonarQube Code Quality',\n        icon: 'üîç',\n        version: '10.0',\n        category: 'security',\n        description: 'SonarQube integration for code quality analysis, security vulnerability detection, and technical debt management.',\n        tags: ['sonarqube', 'code-quality', 'security', 'static-analysis'],\n        enabled: true,\n        configSchema: {\n            title: 'SonarQube Configuration',\n            fields: [\n                {\n                    name: 'qualityGate',\n                    label: 'Quality Gate',\n                    type: 'select',\n                    options: ['Sonar way', 'Custom', 'Strict'],\n                    default: 'Sonar way',\n                    description: 'Quality gate to enforce code standards'\n                },\n                {\n                    name: 'coverageThreshold',\n                    label: 'Code Coverage Threshold (%)',\n                    type: 'range',\n                    min: 50,\n                    max: 100,\n                    default: 80,\n                    description: 'Minimum code coverage required to pass quality gate'\n                },\n                {\n                    name: 'includeSecurityHotspots',\n                    label: 'Include Security Hotspot Analysis',\n                    type: 'checkbox',\n                    default: true\n                }\n            ]\n        }\n    },\n    // Monitoring Plugins\n    'prometheus-grafana': {\n        id: 'prometheus-grafana',\n        name: 'Prometheus + Grafana',\n        icon: 'üìä',\n        version: '2.45.0',\n        category: 'monitoring',\n        description: 'Complete monitoring stack with Prometheus metrics collection and Grafana dashboards.',\n        tags: ['prometheus', 'grafana', 'monitoring', 'metrics'],\n        enabled: false,\n        configSchema: {\n            title: 'Monitoring Configuration',\n            fields: [\n                {\n                    name: 'metricsEndpoint',\n                    label: 'Metrics Endpoint',\n                    type: 'text',\n                    default: '/actuator/prometheus',\n                    description: 'Endpoint for metrics collection'\n                },\n                {\n                    name: 'retentionPeriod',\n                    label: 'Data Retention Period',\n                    type: 'select',\n                    options: ['7d', '15d', '30d', '90d', '1y'],\n                    default: '30d'\n                },\n                {\n                    name: 'alerting',\n                    label: 'Enable Alerting',\n                    type: 'checkbox',\n                    default: true,\n                    description: 'Configure alerts for critical metrics'\n                }\n            ]\n        }\n    }\n};\n",
            "properties": [
                {
                    "name": "fields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Field[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Field",
            "id": "interface-Field-45624fd2ec5a629d29888476e889503c467108bbb5ea80767795369304bc2ddffb43644f483efe62e3c5676c9081af9795cb753f3afdb53861f3352f82ee3240",
            "file": "src/app/services/plugin-registry.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Plugin {\n    id: string;\n    name: string;\n    icon: string;\n    version: string;\n    category: string;\n    description: string;\n    tags: string[];\n    enabled: boolean;\n    configSchema: ConfigSchema;\n}\n\nexport interface ConfigSchema {\n    title: string;\n    fields: Field[];\n}\n\nexport interface Field {\n    name: string;\n    label: string;\n    type: string;\n    options?: any[] | any;\n    default?: any;\n    description?: string;\n    min?: number;\n    max?: number;\n}\n\nexport const pluginRegistry: { [key: string]: Plugin } = {\n    // Backend Plugins\n    'spring-boot-oauth2': {\n        id: 'spring-boot-oauth2',\n        name: 'Spring Boot + OAuth2',\n        icon: '‚òï',\n        version: '3.2.0',\n        category: 'backend',\n        description: 'Complete Spring Boot setup with OAuth2 security, JWT tokens, and enterprise-grade authentication.',\n        tags: ['java', 'spring', 'oauth2', 'security'],\n        enabled: true,\n        configSchema: {\n            title: 'Spring Boot Configuration',\n            fields: [\n                {\n                    name: 'javaVersion',\n                    label: 'Java Version',\n                    type: 'select',\n                    options: ['11', '17', '21'],\n                    default: '17',\n                    description: 'Select the Java version for your project'\n                },\n                {\n                    name: 'springBootVersion',\n                    label: 'Spring Boot Version',\n                    type: 'select',\n                    options: ['3.0.x', '3.1.x', '3.2.x'],\n                    default: '3.2.x'\n                },\n                {\n                    name: 'includeSwagger',\n                    label: 'Include Swagger Documentation',\n                    type: 'checkbox',\n                    default: true,\n                    description: 'Generate OpenAPI 3.0 documentation with Swagger UI'\n                },\n                {\n                    name: 'oauthProvider',\n                    label: 'OAuth2 Provider',\n                    type: 'radio',\n                    options: [\n                        { value: 'keycloak', label: 'Keycloak' },\n                        { value: 'auth0', label: 'Auth0' },\n                        { value: 'azure-ad', label: 'Azure AD' },\n                        { value: 'google', label: 'Google OAuth' }\n                    ],\n                    default: 'keycloak'\n                },\n                {\n                    name: 'maxConnections',\n                    label: 'Max Database Connections',\n                    type: 'range',\n                    min: 5,\n                    max: 100,\n                    default: 20,\n                    description: 'Maximum number of database connections in the pool'\n                }\n            ]\n        }\n    },\n    'node-express-jwt': {\n        id: 'node-express-jwt',\n        name: 'Node.js + Express + JWT',\n        icon: 'üü¢',\n        version: '18.0.0',\n        category: 'backend',\n        description: 'Modern Node.js backend with Express framework, JWT authentication, and TypeScript support.',\n        tags: ['nodejs', 'express', 'jwt', 'typescript'],\n        enabled: false,\n        configSchema: {\n            title: 'Node.js Configuration',\n            fields: [\n                {\n                    name: 'nodeVersion',\n                    label: 'Node.js Version',\n                    type: 'select',\n                    options: ['16.x', '18.x', '20.x'],\n                    default: '18.x'\n                },\n                {\n                    name: 'useTypeScript',\n                    label: 'Use TypeScript',\n                    type: 'checkbox',\n                    default: true,\n                    description: 'Enable TypeScript for better type safety'\n                },\n                {\n                    name: 'jwtSecret',\n                    label: 'JWT Secret Key',\n                    type: 'text',\n                    default: 'your-super-secret-jwt-key',\n                    description: 'Secret key for JWT token signing'\n                }\n            ]\n        }\n    },\n    // Frontend Plugins\n    'react-material-ui': {\n        id: 'react-material-ui',\n        name: 'React + Material-UI',\n        icon: '‚öõÔ∏è',\n        version: '18.2.0',\n        category: 'frontend',\n        description: 'React application with Material-UI components, Redux Toolkit, and modern development setup.',\n        tags: ['react', 'material-ui', 'redux', 'typescript'],\n        enabled: true,\n        configSchema: {\n            title: 'React Configuration',\n            fields: [\n                {\n                    name: 'reactVersion',\n                    label: 'React Version',\n                    type: 'select',\n                    options: ['17.x', '18.x'],\n                    default: '18.x'\n                },\n                {\n                    name: 'useTypeScript',\n                    label: 'Use TypeScript',\n                    type: 'checkbox',\n                    default: true\n                },\n                {\n                    name: 'stateManagement',\n                    label: 'State Management',\n                    type: 'radio',\n                    options: [\n                        { value: 'redux-toolkit', label: 'Redux Toolkit' },\n                        { value: 'zustand', label: 'Zustand' },\n                        { value: 'context', label: 'React Context' }\n                    ],\n                    default: 'redux-toolkit'\n                },\n                {\n                    name: 'theme',\n                    label: 'UI Theme',\n                    type: 'select',\n                    options: ['light', 'dark', 'auto'],\n                    default: 'auto',\n                    description: 'Default theme for the application'\n                }\n            ]\n        }\n    },\n    'angular-bootstrap': {\n        id: 'angular-bootstrap',\n        name: 'Angular + Bootstrap',\n        icon: 'üÖ∞Ô∏è',\n        version: '17.0.0',\n        category: 'frontend',\n        description: 'Angular application with Bootstrap styling, Angular Material, and enterprise-grade architecture.',\n        tags: ['angular', 'bootstrap', 'material', 'typescript'],\n        enabled: false,\n        configSchema: {\n            title: 'Angular Configuration',\n            fields: [\n                {\n                    name: 'angularVersion',\n                    label: 'Angular Version',\n                    type: 'select',\n                    options: ['15.x', '16.x', '17.x'],\n                    default: '17.x'\n                },\n                {\n                    name: 'includeAngularMaterial',\n                    label: 'Include Angular Material',\n                    type: 'checkbox',\n                    default: true\n                },\n                {\n                    name: 'routingStrategy',\n                    label: 'Routing Strategy',\n                    type: 'radio',\n                    options: [\n                        { value: 'hash', label: 'Hash Location Strategy' },\n                        { value: 'path', label: 'Path Location Strategy' }\n                    ],\n                    default: 'path'\n                }\n            ]\n        }\n    },\n    // Database Plugins\n    'postgresql-config': {\n        id: 'postgresql-config',\n        name: 'PostgreSQL Database',\n        icon: 'üêò',\n        version: '15.0',\n        category: 'database',\n        description: 'PostgreSQL database with connection pooling, migrations, and performance optimization.',\n        tags: ['postgresql', 'database', 'sql', 'migrations'],\n        enabled: true,\n        configSchema: {\n            title: 'PostgreSQL Configuration',\n            fields: [\n                {\n                    name: 'version',\n                    label: 'PostgreSQL Version',\n                    type: 'select',\n                    options: ['13.x', '14.x', '15.x', '16.x'],\n                    default: '15.x'\n                },\n                {\n                    name: 'enableSSL',\n                    label: 'Enable SSL Connection',\n                    type: 'checkbox',\n                    default: true,\n                    description: 'Use SSL for database connections in production'\n                },\n                {\n                    name: 'maxConnections',\n                    label: 'Max Connection Pool Size',\n                    type: 'range',\n                    min: 5,\n                    max: 50,\n                    default: 20\n                },\n                {\n                    name: 'backupSchedule',\n                    label: 'Backup Schedule',\n                    type: 'select',\n                    options: ['daily', 'weekly', 'monthly', 'disabled'],\n                    default: 'daily',\n                    description: 'Automated backup schedule'\n                }\n            ]\n        }\n    },\n    // DevOps Plugins\n    'docker-compose': {\n        id: 'docker-compose',\n        name: 'Docker + Compose',\n        icon: 'üê≥',\n        version: '24.0',\n        category: 'devops',\n        description: 'Complete Docker setup with multi-stage builds, compose configurations, and production optimization.',\n        tags: ['docker', 'containerization', 'devops'],\n        enabled: true,\n        configSchema: {\n            title: 'Docker Configuration',\n            fields: [\n                {\n                    name: 'baseImage',\n                    label: 'Base Image',\n                    type: 'select',\n                    options: ['alpine', 'ubuntu', 'debian'],\n                    default: 'alpine',\n                    description: 'Base Docker image for containers'\n                },\n                {\n                    name: 'multiStage',\n                    label: 'Multi-stage Build',\n                    type: 'checkbox',\n                    default: true,\n                    description: 'Use multi-stage builds for smaller production images'\n                },\n                {\n                    name: 'includeNginx',\n                    label: 'Include Nginx Reverse Proxy',\n                    type: 'checkbox',\n                    default: true\n                }\n            ]\n        }\n    },\n    'gitlab-ci': {\n        id: 'gitlab-ci',\n        name: 'GitLab CI/CD',\n        icon: 'ü¶ä',\n        version: '16.0',\n        category: 'devops',\n        description: 'GitLab CI/CD pipeline with automated testing, building, and deployment stages.',\n        tags: ['gitlab', 'cicd', 'automation', 'deployment'],\n        enabled: true,\n        configSchema: {\n            title: 'GitLab CI/CD Configuration',\n            fields: [\n                {\n                    name: 'stages',\n                    label: 'Pipeline Stages',\n                    type: 'checkbox',\n                    options: [\n                        { value: 'test', label: 'Test', default: true },\n                        { value: 'build', label: 'Build', default: true },\n                        { value: 'security-scan', label: 'Security Scan', default: true },\n                        { value: 'deploy-staging', label: 'Deploy to Staging', default: true },\n                        { value: 'deploy-prod', label: 'Deploy to Production', default: false }\n                    ]\n                },\n                {\n                    name: 'deploymentStrategy',\n                    label: 'Deployment Strategy',\n                    type: 'radio',\n                    options: [\n                        { value: 'blue-green', label: 'Blue-Green Deployment' },\n                        { value: 'rolling', label: 'Rolling Update' },\n                        { value: 'canary', label: 'Canary Deployment' }\n                    ],\n                    default: 'rolling'\n                },\n                {\n                    name: 'notificationChannel',\n                    label: 'Notification Channel',\n                    type: 'text',\n                    default: '#deployments',\n                    description: 'Slack channel for deployment notifications'\n                }\n            ]\n        }\n    },\n    // Security Plugins\n    'sonarqube-analysis': {\n        id: 'sonarqube-analysis',\n        name: 'SonarQube Code Quality',\n        icon: 'üîç',\n        version: '10.0',\n        category: 'security',\n        description: 'SonarQube integration for code quality analysis, security vulnerability detection, and technical debt management.',\n        tags: ['sonarqube', 'code-quality', 'security', 'static-analysis'],\n        enabled: true,\n        configSchema: {\n            title: 'SonarQube Configuration',\n            fields: [\n                {\n                    name: 'qualityGate',\n                    label: 'Quality Gate',\n                    type: 'select',\n                    options: ['Sonar way', 'Custom', 'Strict'],\n                    default: 'Sonar way',\n                    description: 'Quality gate to enforce code standards'\n                },\n                {\n                    name: 'coverageThreshold',\n                    label: 'Code Coverage Threshold (%)',\n                    type: 'range',\n                    min: 50,\n                    max: 100,\n                    default: 80,\n                    description: 'Minimum code coverage required to pass quality gate'\n                },\n                {\n                    name: 'includeSecurityHotspots',\n                    label: 'Include Security Hotspot Analysis',\n                    type: 'checkbox',\n                    default: true\n                }\n            ]\n        }\n    },\n    // Monitoring Plugins\n    'prometheus-grafana': {\n        id: 'prometheus-grafana',\n        name: 'Prometheus + Grafana',\n        icon: 'üìä',\n        version: '2.45.0',\n        category: 'monitoring',\n        description: 'Complete monitoring stack with Prometheus metrics collection and Grafana dashboards.',\n        tags: ['prometheus', 'grafana', 'monitoring', 'metrics'],\n        enabled: false,\n        configSchema: {\n            title: 'Monitoring Configuration',\n            fields: [\n                {\n                    name: 'metricsEndpoint',\n                    label: 'Metrics Endpoint',\n                    type: 'text',\n                    default: '/actuator/prometheus',\n                    description: 'Endpoint for metrics collection'\n                },\n                {\n                    name: 'retentionPeriod',\n                    label: 'Data Retention Period',\n                    type: 'select',\n                    options: ['7d', '15d', '30d', '90d', '1y'],\n                    default: '30d'\n                },\n                {\n                    name: 'alerting',\n                    label: 'Enable Alerting',\n                    type: 'checkbox',\n                    default: true,\n                    description: 'Configure alerts for critical metrics'\n                }\n            ]\n        }\n    }\n};\n",
            "properties": [
                {
                    "name": "default",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[] | any",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Plugin",
            "id": "interface-Plugin-45624fd2ec5a629d29888476e889503c467108bbb5ea80767795369304bc2ddffb43644f483efe62e3c5676c9081af9795cb753f3afdb53861f3352f82ee3240",
            "file": "src/app/services/plugin-registry.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Plugin {\n    id: string;\n    name: string;\n    icon: string;\n    version: string;\n    category: string;\n    description: string;\n    tags: string[];\n    enabled: boolean;\n    configSchema: ConfigSchema;\n}\n\nexport interface ConfigSchema {\n    title: string;\n    fields: Field[];\n}\n\nexport interface Field {\n    name: string;\n    label: string;\n    type: string;\n    options?: any[] | any;\n    default?: any;\n    description?: string;\n    min?: number;\n    max?: number;\n}\n\nexport const pluginRegistry: { [key: string]: Plugin } = {\n    // Backend Plugins\n    'spring-boot-oauth2': {\n        id: 'spring-boot-oauth2',\n        name: 'Spring Boot + OAuth2',\n        icon: '‚òï',\n        version: '3.2.0',\n        category: 'backend',\n        description: 'Complete Spring Boot setup with OAuth2 security, JWT tokens, and enterprise-grade authentication.',\n        tags: ['java', 'spring', 'oauth2', 'security'],\n        enabled: true,\n        configSchema: {\n            title: 'Spring Boot Configuration',\n            fields: [\n                {\n                    name: 'javaVersion',\n                    label: 'Java Version',\n                    type: 'select',\n                    options: ['11', '17', '21'],\n                    default: '17',\n                    description: 'Select the Java version for your project'\n                },\n                {\n                    name: 'springBootVersion',\n                    label: 'Spring Boot Version',\n                    type: 'select',\n                    options: ['3.0.x', '3.1.x', '3.2.x'],\n                    default: '3.2.x'\n                },\n                {\n                    name: 'includeSwagger',\n                    label: 'Include Swagger Documentation',\n                    type: 'checkbox',\n                    default: true,\n                    description: 'Generate OpenAPI 3.0 documentation with Swagger UI'\n                },\n                {\n                    name: 'oauthProvider',\n                    label: 'OAuth2 Provider',\n                    type: 'radio',\n                    options: [\n                        { value: 'keycloak', label: 'Keycloak' },\n                        { value: 'auth0', label: 'Auth0' },\n                        { value: 'azure-ad', label: 'Azure AD' },\n                        { value: 'google', label: 'Google OAuth' }\n                    ],\n                    default: 'keycloak'\n                },\n                {\n                    name: 'maxConnections',\n                    label: 'Max Database Connections',\n                    type: 'range',\n                    min: 5,\n                    max: 100,\n                    default: 20,\n                    description: 'Maximum number of database connections in the pool'\n                }\n            ]\n        }\n    },\n    'node-express-jwt': {\n        id: 'node-express-jwt',\n        name: 'Node.js + Express + JWT',\n        icon: 'üü¢',\n        version: '18.0.0',\n        category: 'backend',\n        description: 'Modern Node.js backend with Express framework, JWT authentication, and TypeScript support.',\n        tags: ['nodejs', 'express', 'jwt', 'typescript'],\n        enabled: false,\n        configSchema: {\n            title: 'Node.js Configuration',\n            fields: [\n                {\n                    name: 'nodeVersion',\n                    label: 'Node.js Version',\n                    type: 'select',\n                    options: ['16.x', '18.x', '20.x'],\n                    default: '18.x'\n                },\n                {\n                    name: 'useTypeScript',\n                    label: 'Use TypeScript',\n                    type: 'checkbox',\n                    default: true,\n                    description: 'Enable TypeScript for better type safety'\n                },\n                {\n                    name: 'jwtSecret',\n                    label: 'JWT Secret Key',\n                    type: 'text',\n                    default: 'your-super-secret-jwt-key',\n                    description: 'Secret key for JWT token signing'\n                }\n            ]\n        }\n    },\n    // Frontend Plugins\n    'react-material-ui': {\n        id: 'react-material-ui',\n        name: 'React + Material-UI',\n        icon: '‚öõÔ∏è',\n        version: '18.2.0',\n        category: 'frontend',\n        description: 'React application with Material-UI components, Redux Toolkit, and modern development setup.',\n        tags: ['react', 'material-ui', 'redux', 'typescript'],\n        enabled: true,\n        configSchema: {\n            title: 'React Configuration',\n            fields: [\n                {\n                    name: 'reactVersion',\n                    label: 'React Version',\n                    type: 'select',\n                    options: ['17.x', '18.x'],\n                    default: '18.x'\n                },\n                {\n                    name: 'useTypeScript',\n                    label: 'Use TypeScript',\n                    type: 'checkbox',\n                    default: true\n                },\n                {\n                    name: 'stateManagement',\n                    label: 'State Management',\n                    type: 'radio',\n                    options: [\n                        { value: 'redux-toolkit', label: 'Redux Toolkit' },\n                        { value: 'zustand', label: 'Zustand' },\n                        { value: 'context', label: 'React Context' }\n                    ],\n                    default: 'redux-toolkit'\n                },\n                {\n                    name: 'theme',\n                    label: 'UI Theme',\n                    type: 'select',\n                    options: ['light', 'dark', 'auto'],\n                    default: 'auto',\n                    description: 'Default theme for the application'\n                }\n            ]\n        }\n    },\n    'angular-bootstrap': {\n        id: 'angular-bootstrap',\n        name: 'Angular + Bootstrap',\n        icon: 'üÖ∞Ô∏è',\n        version: '17.0.0',\n        category: 'frontend',\n        description: 'Angular application with Bootstrap styling, Angular Material, and enterprise-grade architecture.',\n        tags: ['angular', 'bootstrap', 'material', 'typescript'],\n        enabled: false,\n        configSchema: {\n            title: 'Angular Configuration',\n            fields: [\n                {\n                    name: 'angularVersion',\n                    label: 'Angular Version',\n                    type: 'select',\n                    options: ['15.x', '16.x', '17.x'],\n                    default: '17.x'\n                },\n                {\n                    name: 'includeAngularMaterial',\n                    label: 'Include Angular Material',\n                    type: 'checkbox',\n                    default: true\n                },\n                {\n                    name: 'routingStrategy',\n                    label: 'Routing Strategy',\n                    type: 'radio',\n                    options: [\n                        { value: 'hash', label: 'Hash Location Strategy' },\n                        { value: 'path', label: 'Path Location Strategy' }\n                    ],\n                    default: 'path'\n                }\n            ]\n        }\n    },\n    // Database Plugins\n    'postgresql-config': {\n        id: 'postgresql-config',\n        name: 'PostgreSQL Database',\n        icon: 'üêò',\n        version: '15.0',\n        category: 'database',\n        description: 'PostgreSQL database with connection pooling, migrations, and performance optimization.',\n        tags: ['postgresql', 'database', 'sql', 'migrations'],\n        enabled: true,\n        configSchema: {\n            title: 'PostgreSQL Configuration',\n            fields: [\n                {\n                    name: 'version',\n                    label: 'PostgreSQL Version',\n                    type: 'select',\n                    options: ['13.x', '14.x', '15.x', '16.x'],\n                    default: '15.x'\n                },\n                {\n                    name: 'enableSSL',\n                    label: 'Enable SSL Connection',\n                    type: 'checkbox',\n                    default: true,\n                    description: 'Use SSL for database connections in production'\n                },\n                {\n                    name: 'maxConnections',\n                    label: 'Max Connection Pool Size',\n                    type: 'range',\n                    min: 5,\n                    max: 50,\n                    default: 20\n                },\n                {\n                    name: 'backupSchedule',\n                    label: 'Backup Schedule',\n                    type: 'select',\n                    options: ['daily', 'weekly', 'monthly', 'disabled'],\n                    default: 'daily',\n                    description: 'Automated backup schedule'\n                }\n            ]\n        }\n    },\n    // DevOps Plugins\n    'docker-compose': {\n        id: 'docker-compose',\n        name: 'Docker + Compose',\n        icon: 'üê≥',\n        version: '24.0',\n        category: 'devops',\n        description: 'Complete Docker setup with multi-stage builds, compose configurations, and production optimization.',\n        tags: ['docker', 'containerization', 'devops'],\n        enabled: true,\n        configSchema: {\n            title: 'Docker Configuration',\n            fields: [\n                {\n                    name: 'baseImage',\n                    label: 'Base Image',\n                    type: 'select',\n                    options: ['alpine', 'ubuntu', 'debian'],\n                    default: 'alpine',\n                    description: 'Base Docker image for containers'\n                },\n                {\n                    name: 'multiStage',\n                    label: 'Multi-stage Build',\n                    type: 'checkbox',\n                    default: true,\n                    description: 'Use multi-stage builds for smaller production images'\n                },\n                {\n                    name: 'includeNginx',\n                    label: 'Include Nginx Reverse Proxy',\n                    type: 'checkbox',\n                    default: true\n                }\n            ]\n        }\n    },\n    'gitlab-ci': {\n        id: 'gitlab-ci',\n        name: 'GitLab CI/CD',\n        icon: 'ü¶ä',\n        version: '16.0',\n        category: 'devops',\n        description: 'GitLab CI/CD pipeline with automated testing, building, and deployment stages.',\n        tags: ['gitlab', 'cicd', 'automation', 'deployment'],\n        enabled: true,\n        configSchema: {\n            title: 'GitLab CI/CD Configuration',\n            fields: [\n                {\n                    name: 'stages',\n                    label: 'Pipeline Stages',\n                    type: 'checkbox',\n                    options: [\n                        { value: 'test', label: 'Test', default: true },\n                        { value: 'build', label: 'Build', default: true },\n                        { value: 'security-scan', label: 'Security Scan', default: true },\n                        { value: 'deploy-staging', label: 'Deploy to Staging', default: true },\n                        { value: 'deploy-prod', label: 'Deploy to Production', default: false }\n                    ]\n                },\n                {\n                    name: 'deploymentStrategy',\n                    label: 'Deployment Strategy',\n                    type: 'radio',\n                    options: [\n                        { value: 'blue-green', label: 'Blue-Green Deployment' },\n                        { value: 'rolling', label: 'Rolling Update' },\n                        { value: 'canary', label: 'Canary Deployment' }\n                    ],\n                    default: 'rolling'\n                },\n                {\n                    name: 'notificationChannel',\n                    label: 'Notification Channel',\n                    type: 'text',\n                    default: '#deployments',\n                    description: 'Slack channel for deployment notifications'\n                }\n            ]\n        }\n    },\n    // Security Plugins\n    'sonarqube-analysis': {\n        id: 'sonarqube-analysis',\n        name: 'SonarQube Code Quality',\n        icon: 'üîç',\n        version: '10.0',\n        category: 'security',\n        description: 'SonarQube integration for code quality analysis, security vulnerability detection, and technical debt management.',\n        tags: ['sonarqube', 'code-quality', 'security', 'static-analysis'],\n        enabled: true,\n        configSchema: {\n            title: 'SonarQube Configuration',\n            fields: [\n                {\n                    name: 'qualityGate',\n                    label: 'Quality Gate',\n                    type: 'select',\n                    options: ['Sonar way', 'Custom', 'Strict'],\n                    default: 'Sonar way',\n                    description: 'Quality gate to enforce code standards'\n                },\n                {\n                    name: 'coverageThreshold',\n                    label: 'Code Coverage Threshold (%)',\n                    type: 'range',\n                    min: 50,\n                    max: 100,\n                    default: 80,\n                    description: 'Minimum code coverage required to pass quality gate'\n                },\n                {\n                    name: 'includeSecurityHotspots',\n                    label: 'Include Security Hotspot Analysis',\n                    type: 'checkbox',\n                    default: true\n                }\n            ]\n        }\n    },\n    // Monitoring Plugins\n    'prometheus-grafana': {\n        id: 'prometheus-grafana',\n        name: 'Prometheus + Grafana',\n        icon: 'üìä',\n        version: '2.45.0',\n        category: 'monitoring',\n        description: 'Complete monitoring stack with Prometheus metrics collection and Grafana dashboards.',\n        tags: ['prometheus', 'grafana', 'monitoring', 'metrics'],\n        enabled: false,\n        configSchema: {\n            title: 'Monitoring Configuration',\n            fields: [\n                {\n                    name: 'metricsEndpoint',\n                    label: 'Metrics Endpoint',\n                    type: 'text',\n                    default: '/actuator/prometheus',\n                    description: 'Endpoint for metrics collection'\n                },\n                {\n                    name: 'retentionPeriod',\n                    label: 'Data Retention Period',\n                    type: 'select',\n                    options: ['7d', '15d', '30d', '90d', '1y'],\n                    default: '30d'\n                },\n                {\n                    name: 'alerting',\n                    label: 'Enable Alerting',\n                    type: 'checkbox',\n                    default: true,\n                    description: 'Configure alerts for critical metrics'\n                }\n            ]\n        }\n    }\n};\n",
            "properties": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "configSchema",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConfigSchema",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "enabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "tags",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "WizardStateService",
            "id": "injectable-WizardStateService-738501e45a37d4551fc4081dee81a76d711d6180c57e15fc75ce60487afcb3d04364868246b3c2352944110e0ff1d0e0cc2edb0bb8da28127d8701098188c61b",
            "file": "src/app/services/wizard-state.ts",
            "properties": [
                {
                    "name": "_currentStep",
                    "defaultValue": "new BehaviorSubject<number>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "_pluginConfigurations",
                    "defaultValue": "new BehaviorSubject<{ [key: string]: any }>(this.getInitialPluginConfigurations())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "_plugins",
                    "defaultValue": "new BehaviorSubject<Plugin[]>(Object.values(pluginRegistry))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "_selectedPlugins",
                    "defaultValue": "new BehaviorSubject<Plugin[]>(this.getInitialSelectedPlugins())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "_wizardSteps",
                    "defaultValue": "new BehaviorSubject<any[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "currentStep$",
                    "defaultValue": "this._currentStep.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "pluginConfigurations$",
                    "defaultValue": "this._pluginConfigurations.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "plugins$",
                    "defaultValue": "this._plugins.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "selectedPlugins$",
                    "defaultValue": "this._selectedPlugins.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "wizardSteps$",
                    "defaultValue": "this._wizardSteps.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "generateWizardSteps",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDefaultConfiguration",
                    "args": [
                        {
                            "name": "plugin",
                            "type": "Plugin",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "plugin",
                            "type": "Plugin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getInitialPluginConfigurations",
                    "args": [],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getInitialSelectedPlugins",
                    "args": [],
                    "optional": false,
                    "returnType": "Plugin[]",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "nextStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "previousStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "togglePlugin",
                    "args": [
                        {
                            "name": "plugin",
                            "type": "Plugin",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "plugin",
                            "type": "Plugin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePluginConfiguration",
                    "args": [
                        {
                            "name": "pluginId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pluginId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { pluginRegistry, Plugin } from './plugin-registry';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WizardStateService {\n  private readonly _plugins = new BehaviorSubject<Plugin[]>(Object.values(pluginRegistry));\n  readonly plugins$ = this._plugins.asObservable();\n\n  private readonly _selectedPlugins = new BehaviorSubject<Plugin[]>(this.getInitialSelectedPlugins());\n  readonly selectedPlugins$ = this._selectedPlugins.asObservable();\n\n  private readonly _pluginConfigurations = new BehaviorSubject<{ [key: string]: any }>(this.getInitialPluginConfigurations());\n  readonly pluginConfigurations$ = this._pluginConfigurations.asObservable();\n\n  private readonly _wizardSteps = new BehaviorSubject<any[]>([]);\n  readonly wizardSteps$ = this._wizardSteps.asObservable();\n\n  private readonly _currentStep = new BehaviorSubject<number>(1);\n  readonly currentStep$ = this._currentStep.asObservable();\n\n  constructor() {\n    this.generateWizardSteps();\n  }\n\n  private getInitialSelectedPlugins(): Plugin[] {\n    return Object.values(pluginRegistry).filter(p => p.enabled);\n  }\n\n  private getInitialPluginConfigurations(): { [key: string]: any } {\n    const configs: { [key: string]: any } = {};\n    this.getInitialSelectedPlugins().forEach(plugin => {\n      configs[plugin.id] = this.getDefaultConfiguration(plugin);\n    });\n    return configs;\n  }\n\n  private getDefaultConfiguration(plugin: Plugin): any {\n    const config: any = {};\n    if (plugin.configSchema) {\n      plugin.configSchema.fields.forEach(field => {\n        if (field.type === 'checkbox' && Array.isArray(field.options)) {\n          config[field.name] = field.options.filter((option: any) => option.default).map((option: any) => option.value);\n        } else {\n          config[field.name] = field.default;\n        }\n      });\n    }\n    return config;\n  }\n\n  generateWizardSteps() {\n    const steps = [\n      {\n        id: 'project-info',\n        title: 'Project Info',\n        icon: 'üìã'\n      }\n    ];\n\n    this._selectedPlugins.getValue().forEach(plugin => {\n      if (plugin.configSchema && plugin.configSchema.fields.length > 0) {\n        steps.push({\n          id: `plugin-${plugin.id}`,\n          title: plugin.name.split(' ')[0],\n          icon: plugin.icon,\n        });\n      }\n    });\n\n    steps.push({\n      id: 'review-generate',\n      title: 'Review & Generate',\n      icon: 'üöÄ'\n    });\n\n    this._wizardSteps.next(steps);\n  }\n\n  nextStep() {\n    if (this._currentStep.getValue() < this._wizardSteps.getValue().length) {\n      this._currentStep.next(this._currentStep.getValue() + 1);\n    }\n  }\n\n  previousStep() {\n    if (this._currentStep.getValue() > 1) {\n      this._currentStep.next(this._currentStep.getValue() - 1);\n    }\n  }\n\n  togglePlugin(plugin: Plugin) {\n    const selectedPlugins = this._selectedPlugins.getValue();\n    const pluginConfigs = this._pluginConfigurations.getValue();\n\n    const index = selectedPlugins.findIndex(p => p.id === plugin.id);\n    if (index > -1) {\n      selectedPlugins.splice(index, 1);\n      delete pluginConfigs[plugin.id];\n    } else {\n      selectedPlugins.push(plugin);\n      pluginConfigs[plugin.id] = this.getDefaultConfiguration(plugin);\n    }\n\n    this._selectedPlugins.next([...selectedPlugins]);\n    this._pluginConfigurations.next({ ...pluginConfigs });\n    this.generateWizardSteps();\n  }\n\n  updatePluginConfiguration(pluginId: string, fieldName: string, value: any) {\n    const pluginConfigs = this._pluginConfigurations.getValue();\n    if (!pluginConfigs[pluginId]) {\n      pluginConfigs[pluginId] = {};\n    }\n    pluginConfigs[pluginId][fieldName] = value;\n    this._pluginConfigurations.next({ ...pluginConfigs });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-81ce8a6eb6b52ae8abdf95ea9f6e14f8b1fef31b48da06241247732f75b6c16a7076689784e041ca2b1ee8b80a54206b074a20038adf87c2353db294abe78fbe",
            "file": "src/app/app.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'smart-scaffolding-wizard'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                },
                {
                    "name": "WizardComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { HeaderComponent } from './components/header/header';\nimport { WizardComponent } from './components/wizard/wizard';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.html',\n  styleUrls: ['./app.css'],\n  standalone: true,\n  imports: [RouterOutlet, HeaderComponent, WizardComponent, CommonModule],\n})\nexport class AppComponent {\n  title = 'smart-scaffolding-wizard';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<router-outlet></router-outlet>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d7bf0323e6da130e2609e2af0117b4a8d7cd874132206af50bf43dfc37044485fe50f2867ea76525730dd195b9b95a43802a12dadc6ad5cd7bf2faa07f19f0da",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": " <button  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 760,
                            "end": 773,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 761,
                                "end": 769,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /** Is this the principal call to action on the page? */\n  @Input()\n  primary = false;\n\n  /** What background color to use */\n  @Input()\n  backgroundColor?: string;\n\n  /** How large should the button be? */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /** Optional click handler */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #555ab9;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-48b9abe37706bc42f20cfa97ed9f943678344ea7d254c0c82183c657750c2191b43486fe730c778627b2ea6aa0e2f33a7abcf3ce08b68ad18b062ad99ea97acb",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-10cb50b25d15055b2c6eac9c3061f71edbbb94b76ab60d154f8bd7f22863170d1c7831e434cba66912bf8276b4fab7679965eace23bcab91f4e327c921b87a81-1",
            "file": "src/app/components/header/header.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "templateUrl": [
                "./header.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isPluginManagerOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "closePluginManager",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openPluginManager",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "PluginManagerComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { PluginManagerComponent } from '../plugin-manager/plugin-manager';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.html',\n  styleUrls: ['./header.css'],\n  standalone: true,\n  imports: [PluginManagerComponent, CommonModule]\n})\nexport class HeaderComponent {\n  isPluginManagerOpen = false;\n\n  openPluginManager() {\n    this.isPluginManagerOpen = true;\n  }\n\n  closePluginManager() {\n    this.isPluginManagerOpen = false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<div class=\"header\">\n  <button class=\"plugin-config-btn\" (click)=\"openPluginManager()\">‚öôÔ∏è Configure Plugins</button>\n  <h1>üöÄ Smart Scaffolding Generator</h1>\n  <p>Accelerate your development lifecycle with intelligent project scaffolding</p>\n</div>\n<app-plugin-manager *ngIf=\"isPluginManagerOpen\" (closeManager)=\"closePluginManager()\"></app-plugin-manager>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-21dd6eb370b4983b5c21c84d40e6f54d266a9d9af9889e6e76b35c43058bd53b3e451bad089d5adf4bea46647ba10265a2fa8cb15630398e75636307d4817fc6",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  margin: 0 auto;\n  padding: 48px 20px;\n  max-width: 600px;\n  color: #333;\n  font-size: 14px;\n  line-height: 24px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-page h2 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 0 4px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  color: inherit;\n}\n\n.storybook-page ul {\n  margin: 1em 0;\n  padding-left: 30px;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 10px;\n  border-radius: 1em;\n  background: #e7fdd8;\n  padding: 4px 12px;\n  color: #357a14;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 12px;\n}\n\n.storybook-page .tip-wrapper {\n  margin-top: 40px;\n  margin-bottom: 40px;\n  font-size: 13px;\n  line-height: 20px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 3px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PluginConfigStepComponent",
            "id": "component-PluginConfigStepComponent-6b5df7f09ceedfc7d1c942f3268e625b599c95264bf256afbcf22ec95ffc6d13de463f8ff1cdc5a119f876482a11c30b3ad98e955f1196d97c34003c6d6dc1ef",
            "file": "src/app/components/plugin-config-step/plugin-config-step.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-plugin-config-step",
            "styleUrls": [
                "./plugin-config-step.css"
            ],
            "styles": [],
            "templateUrl": [
                "./plugin-config-step.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "plugin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "Plugin | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "currentStep",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "loadPlugin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectRadio",
                    "args": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleCheckbox",
                    "args": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateConfig",
                    "args": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, OnDestroy } from '@angular/core';\nimport { Plugin } from '../../services/plugin-registry';\nimport { WizardStateService } from '../../services/wizard-state';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-plugin-config-step',\n  templateUrl: './plugin-config-step.html',\n  styleUrls: ['./plugin-config-step.css'],\n  standalone: true,\n  imports: [CommonModule, FormsModule]\n})\nexport class PluginConfigStepComponent implements OnInit, OnDestroy {\n  @Input() plugin: Plugin | undefined;\n  config: any = {};\n  private subscriptions = new Subscription();\n  private currentStep = 0;\n\n  constructor(private wizardState: WizardStateService) {}\n\n  ngOnInit() {\n    this.subscriptions.add(this.wizardState.currentStep$.subscribe(step => {\n      this.currentStep = step;\n      this.loadPlugin();\n    }));\n    this.subscriptions.add(this.wizardState.pluginConfigurations$.subscribe(configs => {\n        if (this.plugin) {\n            this.config = configs[this.plugin.id];\n        }\n    }));\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.unsubscribe();\n  }\n\n  loadPlugin() {\n    this.subscriptions.add(this.wizardState.wizardSteps$.subscribe(steps => {\n      const currentStepData = steps[this.currentStep - 1];\n      if (currentStepData && currentStepData.id.startsWith('plugin-')) {\n        const pluginId = currentStepData.id.replace('plugin-', '');\n        this.subscriptions.add(this.wizardState.plugins$.subscribe(plugins => {\n            this.plugin = plugins.find(p => p.id === pluginId);\n        }));\n      }\n    }));\n  }\n\n  updateConfig(fieldName: string, event: any) {\n    const value = event.target.value;\n    if (this.plugin) {\n      this.wizardState.updatePluginConfiguration(this.plugin.id, fieldName, value);\n    }\n  }\n\n  toggleCheckbox(fieldName: string) {\n    if (this.plugin) {\n        const currentValue = this.config[fieldName];\n        this.wizardState.updatePluginConfiguration(this.plugin.id, fieldName, !currentValue);\n    }\n  }\n\n  selectRadio(fieldName: string, value: any) {\n    if (this.plugin) {\n        this.wizardState.updatePluginConfiguration(this.plugin.id, fieldName, value);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./plugin-config-step.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "wizardState",
                        "type": "WizardStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "wizardState",
                        "type": "WizardStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"plugin-config-section\" *ngIf=\"plugin\">\n  <div class=\"plugin-config-header\">\n      <span class=\"icon\">{{plugin.icon}}</span>\n      <h3>{{plugin.configSchema.title}}</h3>\n  </div>\n  <div class=\"form-content\">\n    <div *ngFor=\"let field of plugin.configSchema.fields\" class=\"form-group\">\n      <ng-container [ngSwitch]=\"field.type\">\n        <div *ngSwitchCase=\"'text'\">\n          <label [for]=\"field.name\">{{field.label}}</label>\n          <div *ngIf=\"field.description\" class=\"description\">{{field.description}}</div>\n          <input type=\"text\" [id]=\"field.name\" [value]=\"config[field.name]\" (change)=\"updateConfig(field.name, $event)\">\n        </div>\n        <div *ngSwitchCase=\"'select'\">\n          <label [for]=\"field.name\">{{field.label}}</label>\n          <div *ngIf=\"field.description\" class=\"description\">{{field.description}}</div>\n          <select [id]=\"field.name\" [value]=\"config[field.name]\" (change)=\"updateConfig(field.name, $event)\">\n            <option *ngFor=\"let option of field.options\" [value]=\"option\">{{option}}</option>\n          </select>\n        </div>\n        <div *ngSwitchCase=\"'checkbox'\">\n            <div class=\"checkbox-item\" [ngClass]=\"{'checked': config[field.name]}\" (click)=\"toggleCheckbox(field.name)\">\n                <input type=\"checkbox\" [id]=\"field.name\" [checked]=\"config[field.name]\" (change)=\"updateConfig(field.name, $event)\">\n                <label [for]=\"field.name\">{{field.label}}</label>\n            </div>\n            <div *ngIf=\"field.description\" class=\"description\">{{field.description}}</div>\n        </div>\n        <div *ngSwitchCase=\"'radio'\">\n            <label>{{field.label}}</label>\n            <div *ngIf=\"field.description\" class=\"description\">{{field.description}}</div>\n            <div class=\"radio-group\">\n                <div *ngFor=\"let option of field.options\" class=\"radio-item\" [ngClass]=\"{'checked': config[field.name] === option.value}\" (click)=\"selectRadio(field.name, option.value)\">\n                    <input type=\"radio\" [id]=\"option.value\" [name]=\"field.name\" [value]=\"option.value\" [checked]=\"config[field.name] === option.value\">\n                    <label [for]=\"option.value\">{{option.label}}</label>\n                </div>\n            </div>\n        </div>\n        <div *ngSwitchCase=\"'range'\">\n            <label [for]=\"field.name\">{{field.label}}</label>\n            <div *ngIf=\"field.description\" class=\"description\">{{field.description}}</div>\n            <div style=\"display: flex; align-items: center;\">\n                <input type=\"range\" [id]=\"field.name\" [min]=\"field.min\" [max]=\"field.max\" [value]=\"config[field.name]\" (change)=\"updateConfig(field.name, $event)\">\n                <span class=\"range-value\">{{config[field.name]}}</span>\n            </div>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "PluginManagerComponent",
            "id": "component-PluginManagerComponent-e18ba7ec7cd1999b8b22981447b8163de2a4471583677be1fcc72472591f543aed07e9c5a6d70c1076ef75be760583548bd6f42f6e81068f810eed8d078d71cf",
            "file": "src/app/components/plugin-manager/plugin-manager.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-plugin-manager",
            "styleUrls": [
                "./plugin-manager.css"
            ],
            "styles": [],
            "templateUrl": [
                "./plugin-manager.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "closeManager",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "allPlugins",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Plugin[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "filteredPlugins",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Plugin[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "selectedCategory",
                    "defaultValue": "'all'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "selectedPlugins",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Plugin[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "apply",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "filterPlugins",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isSelected",
                    "args": [
                        {
                            "name": "plugin",
                            "type": "Plugin",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "plugin",
                            "type": "Plugin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectCategory",
                    "args": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "togglePlugin",
                    "args": [
                        {
                            "name": "plugin",
                            "type": "Plugin",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "plugin",
                            "type": "Plugin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, Output, EventEmitter } from '@angular/core';\nimport { WizardStateService } from '../../services/wizard-state';\nimport { Plugin } from '../../services/plugin-registry';\nimport { CommonModule } from '@angular/common';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-plugin-manager',\n  templateUrl: './plugin-manager.html',\n  styleUrls: ['./plugin-manager.css'],\n  standalone: true,\n  imports: [CommonModule]\n})\nexport class PluginManagerComponent implements OnInit, OnDestroy {\n  @Output() closeManager = new EventEmitter<void>();\n  \n  allPlugins: Plugin[] = [];\n  filteredPlugins: Plugin[] = [];\n  selectedPlugins: Plugin[] = [];\n  selectedCategory = 'all';\n  private subscriptions = new Subscription();\n\n  constructor(private wizardState: WizardStateService) {}\n\n  ngOnInit() {\n    this.subscriptions.add(this.wizardState.plugins$.subscribe(plugins => {\n      this.allPlugins = plugins;\n      this.filterPlugins();\n    }));\n    this.subscriptions.add(this.wizardState.selectedPlugins$.subscribe(plugins => this.selectedPlugins = plugins));\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.unsubscribe();\n  }\n\n  filterPlugins() {\n    if (this.selectedCategory === 'all') {\n      this.filteredPlugins = this.allPlugins;\n    } else {\n      this.filteredPlugins = this.allPlugins.filter(p => p.category === this.selectedCategory);\n    }\n  }\n\n  selectCategory(category: string) {\n    this.selectedCategory = category;\n    this.filterPlugins();\n  }\n\n  isSelected(plugin: Plugin): boolean {\n    return this.selectedPlugins.some(p => p.id === plugin.id);\n  }\n\n  togglePlugin(plugin: Plugin) {\n    this.wizardState.togglePlugin(plugin);\n  }\n\n  apply() {\n    this.wizardState.generateWizardSteps();\n    this.close();\n  }\n\n  close() {\n    this.closeManager.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./plugin-manager.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "wizardState",
                        "type": "WizardStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "wizardState",
                        "type": "WizardStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"modal-overlay\">\n  <div class=\"modal\">\n    <div class=\"modal-header\">\n      <h2>üîß Plugin Manager</h2>\n      <button class=\"modal-close\" (click)=\"close()\">&times;</button>\n    </div>\n    <div class=\"modal-content\">\n      <div class=\"plugin-categories\" id=\"pluginCategories\">\n          <div class=\"category-tab\" [ngClass]=\"{'active': selectedCategory === 'all'}\" (click)=\"selectCategory('all')\">All Plugins</div>\n          <div class=\"category-tab\" [ngClass]=\"{'active': selectedCategory === 'backend'}\" (click)=\"selectCategory('backend')\">Backend</div>\n          <div class=\"category-tab\" [ngClass]=\"{'active': selectedCategory === 'frontend'}\" (click)=\"selectCategory('frontend')\">Frontend</div>\n          <div class=\"category-tab\" [ngClass]=\"{'active': selectedCategory === 'database'}\" (click)=\"selectCategory('database')\">Database</div>\n          <div class=\"category-tab\" [ngClass]=\"{'active': selectedCategory === 'devops'}\" (click)=\"selectCategory('devops')\">DevOps</div>\n          <div class=\"category-tab\" [ngClass]=\"{'active': selectedCategory === 'security'}\" (click)=\"selectCategory('security')\">Security</div>\n          <div class=\"category-tab\" [ngClass]=\"{'active': selectedCategory === 'monitoring'}\" (click)=\"selectCategory('monitoring')\">Monitoring</div>\n      </div>\n      <div class=\"plugins-grid\" id=\"pluginsGrid\">\n        <div *ngFor=\"let plugin of filteredPlugins\" class=\"plugin-card\" [ngClass]=\"{'selected': isSelected(plugin)}\" (click)=\"togglePlugin(plugin)\">\n          <input type=\"checkbox\" class=\"plugin-checkbox\" [checked]=\"isSelected(plugin)\">\n          <div class=\"plugin-header\">\n            <span class=\"plugin-icon\">{{plugin.icon}}</span>\n            <h3>{{plugin.name}}</h3>\n            <span class=\"plugin-version\">v{{plugin.version}}</span>\n          </div>\n          <p>{{plugin.description}}</p>\n          <div class=\"plugin-tags\">\n            <span *ngFor=\"let tag of plugin.tags\" class=\"plugin-tag\">{{tag}}</span>\n          </div>\n        </div>\n      </div>\n      <div style=\"margin-top: 30px; text-align: center;\">\n        <button class=\"btn btn-primary\" (click)=\"apply()\">Apply Configuration</button>\n        <button class=\"btn btn-secondary\" (click)=\"close()\" style=\"margin-left: 15px;\">Cancel</button>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "ProgressBarComponent",
            "id": "component-ProgressBarComponent-d1b1def0bf8f21f662661824a8a14d4d3d49bd96f95a799c11f04622f092b9854e3651730847b149afaa32c69125383fc3a003992bcaf897983f49c67bf24024",
            "file": "src/app/components/progress-bar/progress-bar.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-progress-bar",
            "styleUrls": [
                "./progress-bar.css"
            ],
            "styles": [],
            "templateUrl": [
                "./progress-bar.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentStep",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "wizardSteps",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateProgressBarStyle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { WizardStateService } from '../../services/wizard-state';\nimport { CommonModule } from '@angular/common';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-progress-bar',\n  templateUrl: './progress-bar.html',\n  styleUrls: ['./progress-bar.css'],\n  standalone: true,\n  imports: [CommonModule]\n})\nexport class ProgressBarComponent implements OnInit, OnDestroy {\n  wizardSteps: any[] = [];\n  currentStep = 1;\n  private subscriptions = new Subscription();\n\n  constructor(private wizardState: WizardStateService) {}\n\n  ngOnInit() {\n    this.subscriptions.add(this.wizardState.wizardSteps$.subscribe(steps => this.wizardSteps = steps));\n    this.subscriptions.add(this.wizardState.currentStep$.subscribe(step => {\n      this.currentStep = step;\n      this.updateProgressBarStyle();\n    }));\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.unsubscribe();\n  }\n\n  updateProgressBarStyle() {\n    const progressWidth = ((this.currentStep - 1) / (this.wizardSteps.length - 1)) * 100;\n    const styleId = 'progress-style';\n    let styleElement = document.getElementById(styleId) as HTMLStyleElement;\n    if (!styleElement) {\n      styleElement = document.createElement('style');\n      styleElement.id = styleId;\n      document.head.appendChild(styleElement);\n    }\n    styleElement.textContent = `.progress-bar::after { width: ${progressWidth}%; }`;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./progress-bar.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "wizardState",
                        "type": "WizardStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "wizardState",
                        "type": "WizardStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"progress-bar\" id=\"progressBar\">\n  <div *ngFor=\"let step of wizardSteps; let i = index\" class=\"step\" [ngClass]=\"{'active': i + 1 === currentStep, 'completed': i + 1 < currentStep}\">\n    <div class=\"step-circle\">{{step.icon}}</div>\n    <div class=\"step-title\">{{step.title}}</div>\n  </div>\n</div>\n"
        },
        {
            "name": "ProjectInfoStepComponent",
            "id": "component-ProjectInfoStepComponent-406ee3bc27925a2ead6cdfe28474c018240afb029c2d91d7d0e38f9a22aa47bff5c2723761e83453c621d7526add550aabd07a894468e3f882c6a67fabd7627d",
            "file": "src/app/components/project-info-step/project-info-step.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-project-info-step",
            "styleUrls": [
                "./project-info-step.css"
            ],
            "styles": [],
            "templateUrl": [
                "./project-info-step.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'app-project-info-step',\n  templateUrl: './project-info-step.html',\n  styleUrls: ['./project-info-step.css'],\n  standalone: true,\n  imports: [CommonModule, FormsModule]\n})\nexport class ProjectInfoStepComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./project-info-step.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<h2>üìã Project Information</h2>\n<div class=\"form-row\">\n    <div class=\"form-group\">\n        <label for=\"projectName\">Project Name</label>\n        <input type=\"text\" id=\"projectName\" placeholder=\"Enter your project name\" required>\n        <div class=\"description\">A unique name for your project</div>\n    </div>\n    <div class=\"form-group\">\n        <label for=\"organization\">Organization</label>\n        <input type=\"text\" id=\"organization\" placeholder=\"ELCA\" value=\"ELCA\">\n        <div class=\"description\">Your organization or company name</div>\n    </div>\n</div>\n<div class=\"form-group\">\n    <label for=\"projectDescription\">Description</label>\n    <textarea id=\"projectDescription\" rows=\"3\" placeholder=\"Describe your project and its main objectives...\"></textarea>\n    <div class=\"description\">Brief description of your project's purpose and goals</div>\n</div>\n<div class=\"form-row\">\n    <div class=\"form-group\">\n        <label for=\"packageName\">Package Name</label>\n        <input type=\"text\" id=\"packageName\" placeholder=\"com.elca.yourproject\">\n        <div class=\"description\">Java package naming convention</div>\n    </div>\n    <div class=\"form-group\">\n        <label for=\"projectVersion\">Initial Version</label>\n        <input type=\"text\" id=\"projectVersion\" placeholder=\"1.0.0\" value=\"1.0.0\">\n        <div class=\"description\">Semantic version number</div>\n    </div>\n</div>\n"
        },
        {
            "name": "ReviewStepComponent",
            "id": "component-ReviewStepComponent-e181da12534c6ac799204b55e1f5fd673476a0ad5fd0ca8e54b2d52b66bc47ce50b048c152a6f4223dbff57d36ac2543983cc3d384305fefb6e4d3ecea39f46c",
            "file": "src/app/components/review-step/review-step.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-review-step",
            "styleUrls": [
                "./review-step.css"
            ],
            "styles": [],
            "templateUrl": [
                "./review-step.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "organization",
                    "defaultValue": "'ELCA'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "pluginConfigurations",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "projectName",
                    "defaultValue": "'Untitled Project'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "selectedPlugins",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Plugin[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "downloadProject",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "generateProject",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPluginConfig",
                    "args": [
                        {
                            "name": "pluginId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pluginId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "KeyValuePipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { WizardStateService } from '../../services/wizard-state';\nimport { Plugin } from '../../services/plugin-registry';\nimport { CommonModule, KeyValuePipe } from '@angular/common';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-review-step',\n  templateUrl: './review-step.html',\n  styleUrls: ['./review-step.css'],\n  standalone: true,\n  imports: [CommonModule, KeyValuePipe]\n})\nexport class ReviewStepComponent implements OnInit, OnDestroy {\n  projectName = 'Untitled Project';\n  organization = 'ELCA';\n  selectedPlugins: Plugin[] = [];\n  pluginConfigurations: { [key: string]: any } = {};\n  private subscriptions = new Subscription();\n\n  constructor(private wizardState: WizardStateService) {}\n\n  ngOnInit() {\n    this.subscriptions.add(this.wizardState.selectedPlugins$.subscribe(plugins => this.selectedPlugins = plugins));\n    this.subscriptions.add(this.wizardState.pluginConfigurations$.subscribe(configs => this.pluginConfigurations = configs));\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.unsubscribe();\n  }\n\n  getPluginConfig(pluginId: string) {\n    return this.pluginConfigurations[pluginId];\n  }\n\n  generateProject() {\n    document.getElementById('reviewContent')!.style.display = 'none';\n    document.getElementById('loadingAnimation')!.classList.remove('hidden');\n    \n    setTimeout(() => {\n        document.getElementById('loadingAnimation')!.classList.add('hidden');\n        document.getElementById('successMessage')!.classList.remove('hidden');\n    }, 3000);\n  }\n\n  downloadProject() {\n    const pluginList = this.selectedPlugins.map(p => p.name).join('\\\\n‚Ä¢ ');\n    alert(`üéâ Project \"${this.projectName}\" would be downloaded with:\\\\n\\\\n` +\n          `Selected Plugins:\\\\n‚Ä¢ ${pluginList}\\\\n\\\\n` +\n          `Generated Files:\\\\n` +\n          `‚Ä¢ Complete source code scaffolding\\\\n` +\n          `‚Ä¢ Plugin-specific configurations\\\\n` +\n          `‚Ä¢ Docker and deployment files\\\\n` +\n          `‚Ä¢ CI/CD pipeline configurations\\\\n` +\n          `‚Ä¢ Documentation and setup guides\\\\n\\\\n` +\n          `This is a POC demo - in production, this would generate and download the actual project.`);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./review-step.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "wizardState",
                        "type": "WizardStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "wizardState",
                        "type": "WizardStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<h2>üîç Review Configuration</h2>\n<div id=\"reviewContent\">\n    <div class=\"generation-preview\">\n        <h3>üìã Project Summary</h3>\n        <div class=\"preview-item\"><strong>Project:</strong> {{projectName}}</div>\n        <div class=\"preview-item\"><strong>Organization:</strong> {{organization}}</div>\n        <div class=\"preview-item\"><strong>Selected Plugins:</strong> {{selectedPlugins.length}} plugins configured</div>\n    </div>\n\n    <div class=\"generation-preview\">\n        <h3>üîß Plugin Configurations</h3>\n        <div *ngFor=\"let plugin of selectedPlugins\" class=\"preview-item\">\n            <strong>{{plugin.icon}} {{plugin.name}}:</strong>\n            <ul style=\"margin: 5px 0 0 20px;\">\n                <li *ngFor=\"let config of getPluginConfig(plugin.id) | keyvalue\">\n                    {{config.key}}: {{config.value}}\n                </li>\n            </ul>\n        </div>\n    </div>\n</div>\n\n<div class=\"loading-animation hidden\" id=\"loadingAnimation\">\n    <div class=\"spinner\"></div>\n    <h3>Generating Your Project...</h3>\n    <p>AI is crafting your custom application scaffolding with enterprise-grade best practices.</p>\n</div>\n\n<div class=\"success-message hidden\" id=\"successMessage\">\n    <div class=\"icon\">‚úÖ</div>\n    <h2>Project Generated Successfully!</h2>\n    <p>Your enterprise-ready application scaffolding is ready for download.</p>\n    <div style=\"margin-top: 20px;\">\n        <button class=\"btn btn-primary\" (click)=\"downloadProject()\">üì¶ Download Project</button>\n    </div>\n</div>\n"
        },
        {
            "name": "WizardComponent",
            "id": "component-WizardComponent-4734666909b1cf9e10c30c87a169b0651daaf0f2c86844e39212e64dd843c93257bc759283357c1771364ac9497fa830f94fb4dc712b14adb74a7846e53094cc",
            "file": "src/app/components/wizard/wizard.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-wizard",
            "styleUrls": [
                "./wizard.css"
            ],
            "styles": [],
            "templateUrl": [
                "./wizard.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentStep",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "totalSteps",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "nextStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "previousStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                },
                {
                    "name": "ProgressBarComponent",
                    "type": "component"
                },
                {
                    "name": "ProjectInfoStepComponent",
                    "type": "component"
                },
                {
                    "name": "PluginConfigStepComponent",
                    "type": "component"
                },
                {
                    "name": "ReviewStepComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { WizardStateService } from '../../services/wizard-state';\nimport { CommonModule } from '@angular/common';\nimport { HeaderComponent } from '../header/header';\nimport { ProgressBarComponent } from '../progress-bar/progress-bar';\nimport { ProjectInfoStepComponent } from '../project-info-step/project-info-step';\nimport { PluginConfigStepComponent } from '../plugin-config-step/plugin-config-step';\nimport { ReviewStepComponent } from '../review-step/review-step';\n\n@Component({\n  selector: 'app-wizard',\n  templateUrl: './wizard.html',\n  styleUrls: ['./wizard.css'],\n  standalone: true,\n  imports: [CommonModule, HeaderComponent, ProgressBarComponent, ProjectInfoStepComponent, PluginConfigStepComponent, ReviewStepComponent]\n})\nexport class WizardComponent implements OnInit {\n  currentStep = 1;\n  totalSteps = 1;\n\n  constructor(private wizardState: WizardStateService) {}\n\n  ngOnInit() {\n    this.wizardState.currentStep$.subscribe(step => this.currentStep = step);\n    this.wizardState.wizardSteps$.subscribe(steps => this.totalSteps = steps.length);\n  }\n\n  nextStep() {\n    this.wizardState.nextStep();\n  }\n\n  previousStep() {\n    this.wizardState.previousStep();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./wizard.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "wizardState",
                        "type": "WizardStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "wizardState",
                        "type": "WizardStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\n  <app-header></app-header>\n  <div class=\"wizard-container\">\n    <app-progress-bar></app-progress-bar>\n    <div id=\"dynamicWizardContent\">\n      <div [ngSwitch]=\"currentStep\">\n        <app-project-info-step *ngSwitchCase=\"1\"></app-project-info-step>\n        <app-plugin-config-step *ngSwitchDefault></app-plugin-config-step>\n        <app-review-step *ngSwitchCase=\"totalSteps\"></app-review-step>\n      </div>\n    </div>\n    <div class=\"navigation\">\n      <button class=\"btn btn-secondary\" id=\"prevBtn\" (click)=\"previousStep()\" [style.display]=\"currentStep > 1 ? 'block' : 'none'\">Previous</button>\n      <div></div>\n      <button class=\"btn btn-primary\" id=\"nextBtn\" (click)=\"nextStep()\">{{currentStep === totalSteps ? 'üöÄ Generate Project' : 'Next'}}</button>\n    </div>\n  </div>\n</div>\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "pluginRegistry",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/plugin-registry.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "defaultValue": "{\n    // Backend Plugins\n    'spring-boot-oauth2': {\n        id: 'spring-boot-oauth2',\n        name: 'Spring Boot + OAuth2',\n        icon: '‚òï',\n        version: '3.2.0',\n        category: 'backend',\n        description: 'Complete Spring Boot setup with OAuth2 security, JWT tokens, and enterprise-grade authentication.',\n        tags: ['java', 'spring', 'oauth2', 'security'],\n        enabled: true,\n        configSchema: {\n            title: 'Spring Boot Configuration',\n            fields: [\n                {\n                    name: 'javaVersion',\n                    label: 'Java Version',\n                    type: 'select',\n                    options: ['11', '17', '21'],\n                    default: '17',\n                    description: 'Select the Java version for your project'\n                },\n                {\n                    name: 'springBootVersion',\n                    label: 'Spring Boot Version',\n                    type: 'select',\n                    options: ['3.0.x', '3.1.x', '3.2.x'],\n                    default: '3.2.x'\n                },\n                {\n                    name: 'includeSwagger',\n                    label: 'Include Swagger Documentation',\n                    type: 'checkbox',\n                    default: true,\n                    description: 'Generate OpenAPI 3.0 documentation with Swagger UI'\n                },\n                {\n                    name: 'oauthProvider',\n                    label: 'OAuth2 Provider',\n                    type: 'radio',\n                    options: [\n                        { value: 'keycloak', label: 'Keycloak' },\n                        { value: 'auth0', label: 'Auth0' },\n                        { value: 'azure-ad', label: 'Azure AD' },\n                        { value: 'google', label: 'Google OAuth' }\n                    ],\n                    default: 'keycloak'\n                },\n                {\n                    name: 'maxConnections',\n                    label: 'Max Database Connections',\n                    type: 'range',\n                    min: 5,\n                    max: 100,\n                    default: 20,\n                    description: 'Maximum number of database connections in the pool'\n                }\n            ]\n        }\n    },\n    'node-express-jwt': {\n        id: 'node-express-jwt',\n        name: 'Node.js + Express + JWT',\n        icon: 'üü¢',\n        version: '18.0.0',\n        category: 'backend',\n        description: 'Modern Node.js backend with Express framework, JWT authentication, and TypeScript support.',\n        tags: ['nodejs', 'express', 'jwt', 'typescript'],\n        enabled: false,\n        configSchema: {\n            title: 'Node.js Configuration',\n            fields: [\n                {\n                    name: 'nodeVersion',\n                    label: 'Node.js Version',\n                    type: 'select',\n                    options: ['16.x', '18.x', '20.x'],\n                    default: '18.x'\n                },\n                {\n                    name: 'useTypeScript',\n                    label: 'Use TypeScript',\n                    type: 'checkbox',\n                    default: true,\n                    description: 'Enable TypeScript for better type safety'\n                },\n                {\n                    name: 'jwtSecret',\n                    label: 'JWT Secret Key',\n                    type: 'text',\n                    default: 'your-super-secret-jwt-key',\n                    description: 'Secret key for JWT token signing'\n                }\n            ]\n        }\n    },\n    // Frontend Plugins\n    'react-material-ui': {\n        id: 'react-material-ui',\n        name: 'React + Material-UI',\n        icon: '‚öõÔ∏è',\n        version: '18.2.0',\n        category: 'frontend',\n        description: 'React application with Material-UI components, Redux Toolkit, and modern development setup.',\n        tags: ['react', 'material-ui', 'redux', 'typescript'],\n        enabled: true,\n        configSchema: {\n            title: 'React Configuration',\n            fields: [\n                {\n                    name: 'reactVersion',\n                    label: 'React Version',\n                    type: 'select',\n                    options: ['17.x', '18.x'],\n                    default: '18.x'\n                },\n                {\n                    name: 'useTypeScript',\n                    label: 'Use TypeScript',\n                    type: 'checkbox',\n                    default: true\n                },\n                {\n                    name: 'stateManagement',\n                    label: 'State Management',\n                    type: 'radio',\n                    options: [\n                        { value: 'redux-toolkit', label: 'Redux Toolkit' },\n                        { value: 'zustand', label: 'Zustand' },\n                        { value: 'context', label: 'React Context' }\n                    ],\n                    default: 'redux-toolkit'\n                },\n                {\n                    name: 'theme',\n                    label: 'UI Theme',\n                    type: 'select',\n                    options: ['light', 'dark', 'auto'],\n                    default: 'auto',\n                    description: 'Default theme for the application'\n                }\n            ]\n        }\n    },\n    'angular-bootstrap': {\n        id: 'angular-bootstrap',\n        name: 'Angular + Bootstrap',\n        icon: 'üÖ∞Ô∏è',\n        version: '17.0.0',\n        category: 'frontend',\n        description: 'Angular application with Bootstrap styling, Angular Material, and enterprise-grade architecture.',\n        tags: ['angular', 'bootstrap', 'material', 'typescript'],\n        enabled: false,\n        configSchema: {\n            title: 'Angular Configuration',\n            fields: [\n                {\n                    name: 'angularVersion',\n                    label: 'Angular Version',\n                    type: 'select',\n                    options: ['15.x', '16.x', '17.x'],\n                    default: '17.x'\n                },\n                {\n                    name: 'includeAngularMaterial',\n                    label: 'Include Angular Material',\n                    type: 'checkbox',\n                    default: true\n                },\n                {\n                    name: 'routingStrategy',\n                    label: 'Routing Strategy',\n                    type: 'radio',\n                    options: [\n                        { value: 'hash', label: 'Hash Location Strategy' },\n                        { value: 'path', label: 'Path Location Strategy' }\n                    ],\n                    default: 'path'\n                }\n            ]\n        }\n    },\n    // Database Plugins\n    'postgresql-config': {\n        id: 'postgresql-config',\n        name: 'PostgreSQL Database',\n        icon: 'üêò',\n        version: '15.0',\n        category: 'database',\n        description: 'PostgreSQL database with connection pooling, migrations, and performance optimization.',\n        tags: ['postgresql', 'database', 'sql', 'migrations'],\n        enabled: true,\n        configSchema: {\n            title: 'PostgreSQL Configuration',\n            fields: [\n                {\n                    name: 'version',\n                    label: 'PostgreSQL Version',\n                    type: 'select',\n                    options: ['13.x', '14.x', '15.x', '16.x'],\n                    default: '15.x'\n                },\n                {\n                    name: 'enableSSL',\n                    label: 'Enable SSL Connection',\n                    type: 'checkbox',\n                    default: true,\n                    description: 'Use SSL for database connections in production'\n                },\n                {\n                    name: 'maxConnections',\n                    label: 'Max Connection Pool Size',\n                    type: 'range',\n                    min: 5,\n                    max: 50,\n                    default: 20\n                },\n                {\n                    name: 'backupSchedule',\n                    label: 'Backup Schedule',\n                    type: 'select',\n                    options: ['daily', 'weekly', 'monthly', 'disabled'],\n                    default: 'daily',\n                    description: 'Automated backup schedule'\n                }\n            ]\n        }\n    },\n    // DevOps Plugins\n    'docker-compose': {\n        id: 'docker-compose',\n        name: 'Docker + Compose',\n        icon: 'üê≥',\n        version: '24.0',\n        category: 'devops',\n        description: 'Complete Docker setup with multi-stage builds, compose configurations, and production optimization.',\n        tags: ['docker', 'containerization', 'devops'],\n        enabled: true,\n        configSchema: {\n            title: 'Docker Configuration',\n            fields: [\n                {\n                    name: 'baseImage',\n                    label: 'Base Image',\n                    type: 'select',\n                    options: ['alpine', 'ubuntu', 'debian'],\n                    default: 'alpine',\n                    description: 'Base Docker image for containers'\n                },\n                {\n                    name: 'multiStage',\n                    label: 'Multi-stage Build',\n                    type: 'checkbox',\n                    default: true,\n                    description: 'Use multi-stage builds for smaller production images'\n                },\n                {\n                    name: 'includeNginx',\n                    label: 'Include Nginx Reverse Proxy',\n                    type: 'checkbox',\n                    default: true\n                }\n            ]\n        }\n    },\n    'gitlab-ci': {\n        id: 'gitlab-ci',\n        name: 'GitLab CI/CD',\n        icon: 'ü¶ä',\n        version: '16.0',\n        category: 'devops',\n        description: 'GitLab CI/CD pipeline with automated testing, building, and deployment stages.',\n        tags: ['gitlab', 'cicd', 'automation', 'deployment'],\n        enabled: true,\n        configSchema: {\n            title: 'GitLab CI/CD Configuration',\n            fields: [\n                {\n                    name: 'stages',\n                    label: 'Pipeline Stages',\n                    type: 'checkbox',\n                    options: [\n                        { value: 'test', label: 'Test', default: true },\n                        { value: 'build', label: 'Build', default: true },\n                        { value: 'security-scan', label: 'Security Scan', default: true },\n                        { value: 'deploy-staging', label: 'Deploy to Staging', default: true },\n                        { value: 'deploy-prod', label: 'Deploy to Production', default: false }\n                    ]\n                },\n                {\n                    name: 'deploymentStrategy',\n                    label: 'Deployment Strategy',\n                    type: 'radio',\n                    options: [\n                        { value: 'blue-green', label: 'Blue-Green Deployment' },\n                        { value: 'rolling', label: 'Rolling Update' },\n                        { value: 'canary', label: 'Canary Deployment' }\n                    ],\n                    default: 'rolling'\n                },\n                {\n                    name: 'notificationChannel',\n                    label: 'Notification Channel',\n                    type: 'text',\n                    default: '#deployments',\n                    description: 'Slack channel for deployment notifications'\n                }\n            ]\n        }\n    },\n    // Security Plugins\n    'sonarqube-analysis': {\n        id: 'sonarqube-analysis',\n        name: 'SonarQube Code Quality',\n        icon: 'üîç',\n        version: '10.0',\n        category: 'security',\n        description: 'SonarQube integration for code quality analysis, security vulnerability detection, and technical debt management.',\n        tags: ['sonarqube', 'code-quality', 'security', 'static-analysis'],\n        enabled: true,\n        configSchema: {\n            title: 'SonarQube Configuration',\n            fields: [\n                {\n                    name: 'qualityGate',\n                    label: 'Quality Gate',\n                    type: 'select',\n                    options: ['Sonar way', 'Custom', 'Strict'],\n                    default: 'Sonar way',\n                    description: 'Quality gate to enforce code standards'\n                },\n                {\n                    name: 'coverageThreshold',\n                    label: 'Code Coverage Threshold (%)',\n                    type: 'range',\n                    min: 50,\n                    max: 100,\n                    default: 80,\n                    description: 'Minimum code coverage required to pass quality gate'\n                },\n                {\n                    name: 'includeSecurityHotspots',\n                    label: 'Include Security Hotspot Analysis',\n                    type: 'checkbox',\n                    default: true\n                }\n            ]\n        }\n    },\n    // Monitoring Plugins\n    'prometheus-grafana': {\n        id: 'prometheus-grafana',\n        name: 'Prometheus + Grafana',\n        icon: 'üìä',\n        version: '2.45.0',\n        category: 'monitoring',\n        description: 'Complete monitoring stack with Prometheus metrics collection and Grafana dashboards.',\n        tags: ['prometheus', 'grafana', 'monitoring', 'metrics'],\n        enabled: false,\n        configSchema: {\n            title: 'Monitoring Configuration',\n            fields: [\n                {\n                    name: 'metricsEndpoint',\n                    label: 'Metrics Endpoint',\n                    type: 'text',\n                    default: '/actuator/prometheus',\n                    description: 'Endpoint for metrics collection'\n                },\n                {\n                    name: 'retentionPeriod',\n                    label: 'Data Retention Period',\n                    type: 'select',\n                    options: ['7d', '15d', '30d', '90d', '1y'],\n                    default: '30d'\n                },\n                {\n                    name: 'alerting',\n                    label: 'Enable Alerting',\n                    type: 'checkbox',\n                    default: true,\n                    description: 'Configure alerts for critical metrics'\n                }\n            ]\n        }\n    }\n}"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Routes",
                "defaultValue": "[\n  { path: '', redirectTo: 'wizard', pathMatch: 'full' },\n  { path: 'wizard', component: WizardComponent }\n]"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/services/plugin-registry.ts": [
                {
                    "name": "pluginRegistry",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/plugin-registry.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "defaultValue": "{\n    // Backend Plugins\n    'spring-boot-oauth2': {\n        id: 'spring-boot-oauth2',\n        name: 'Spring Boot + OAuth2',\n        icon: '‚òï',\n        version: '3.2.0',\n        category: 'backend',\n        description: 'Complete Spring Boot setup with OAuth2 security, JWT tokens, and enterprise-grade authentication.',\n        tags: ['java', 'spring', 'oauth2', 'security'],\n        enabled: true,\n        configSchema: {\n            title: 'Spring Boot Configuration',\n            fields: [\n                {\n                    name: 'javaVersion',\n                    label: 'Java Version',\n                    type: 'select',\n                    options: ['11', '17', '21'],\n                    default: '17',\n                    description: 'Select the Java version for your project'\n                },\n                {\n                    name: 'springBootVersion',\n                    label: 'Spring Boot Version',\n                    type: 'select',\n                    options: ['3.0.x', '3.1.x', '3.2.x'],\n                    default: '3.2.x'\n                },\n                {\n                    name: 'includeSwagger',\n                    label: 'Include Swagger Documentation',\n                    type: 'checkbox',\n                    default: true,\n                    description: 'Generate OpenAPI 3.0 documentation with Swagger UI'\n                },\n                {\n                    name: 'oauthProvider',\n                    label: 'OAuth2 Provider',\n                    type: 'radio',\n                    options: [\n                        { value: 'keycloak', label: 'Keycloak' },\n                        { value: 'auth0', label: 'Auth0' },\n                        { value: 'azure-ad', label: 'Azure AD' },\n                        { value: 'google', label: 'Google OAuth' }\n                    ],\n                    default: 'keycloak'\n                },\n                {\n                    name: 'maxConnections',\n                    label: 'Max Database Connections',\n                    type: 'range',\n                    min: 5,\n                    max: 100,\n                    default: 20,\n                    description: 'Maximum number of database connections in the pool'\n                }\n            ]\n        }\n    },\n    'node-express-jwt': {\n        id: 'node-express-jwt',\n        name: 'Node.js + Express + JWT',\n        icon: 'üü¢',\n        version: '18.0.0',\n        category: 'backend',\n        description: 'Modern Node.js backend with Express framework, JWT authentication, and TypeScript support.',\n        tags: ['nodejs', 'express', 'jwt', 'typescript'],\n        enabled: false,\n        configSchema: {\n            title: 'Node.js Configuration',\n            fields: [\n                {\n                    name: 'nodeVersion',\n                    label: 'Node.js Version',\n                    type: 'select',\n                    options: ['16.x', '18.x', '20.x'],\n                    default: '18.x'\n                },\n                {\n                    name: 'useTypeScript',\n                    label: 'Use TypeScript',\n                    type: 'checkbox',\n                    default: true,\n                    description: 'Enable TypeScript for better type safety'\n                },\n                {\n                    name: 'jwtSecret',\n                    label: 'JWT Secret Key',\n                    type: 'text',\n                    default: 'your-super-secret-jwt-key',\n                    description: 'Secret key for JWT token signing'\n                }\n            ]\n        }\n    },\n    // Frontend Plugins\n    'react-material-ui': {\n        id: 'react-material-ui',\n        name: 'React + Material-UI',\n        icon: '‚öõÔ∏è',\n        version: '18.2.0',\n        category: 'frontend',\n        description: 'React application with Material-UI components, Redux Toolkit, and modern development setup.',\n        tags: ['react', 'material-ui', 'redux', 'typescript'],\n        enabled: true,\n        configSchema: {\n            title: 'React Configuration',\n            fields: [\n                {\n                    name: 'reactVersion',\n                    label: 'React Version',\n                    type: 'select',\n                    options: ['17.x', '18.x'],\n                    default: '18.x'\n                },\n                {\n                    name: 'useTypeScript',\n                    label: 'Use TypeScript',\n                    type: 'checkbox',\n                    default: true\n                },\n                {\n                    name: 'stateManagement',\n                    label: 'State Management',\n                    type: 'radio',\n                    options: [\n                        { value: 'redux-toolkit', label: 'Redux Toolkit' },\n                        { value: 'zustand', label: 'Zustand' },\n                        { value: 'context', label: 'React Context' }\n                    ],\n                    default: 'redux-toolkit'\n                },\n                {\n                    name: 'theme',\n                    label: 'UI Theme',\n                    type: 'select',\n                    options: ['light', 'dark', 'auto'],\n                    default: 'auto',\n                    description: 'Default theme for the application'\n                }\n            ]\n        }\n    },\n    'angular-bootstrap': {\n        id: 'angular-bootstrap',\n        name: 'Angular + Bootstrap',\n        icon: 'üÖ∞Ô∏è',\n        version: '17.0.0',\n        category: 'frontend',\n        description: 'Angular application with Bootstrap styling, Angular Material, and enterprise-grade architecture.',\n        tags: ['angular', 'bootstrap', 'material', 'typescript'],\n        enabled: false,\n        configSchema: {\n            title: 'Angular Configuration',\n            fields: [\n                {\n                    name: 'angularVersion',\n                    label: 'Angular Version',\n                    type: 'select',\n                    options: ['15.x', '16.x', '17.x'],\n                    default: '17.x'\n                },\n                {\n                    name: 'includeAngularMaterial',\n                    label: 'Include Angular Material',\n                    type: 'checkbox',\n                    default: true\n                },\n                {\n                    name: 'routingStrategy',\n                    label: 'Routing Strategy',\n                    type: 'radio',\n                    options: [\n                        { value: 'hash', label: 'Hash Location Strategy' },\n                        { value: 'path', label: 'Path Location Strategy' }\n                    ],\n                    default: 'path'\n                }\n            ]\n        }\n    },\n    // Database Plugins\n    'postgresql-config': {\n        id: 'postgresql-config',\n        name: 'PostgreSQL Database',\n        icon: 'üêò',\n        version: '15.0',\n        category: 'database',\n        description: 'PostgreSQL database with connection pooling, migrations, and performance optimization.',\n        tags: ['postgresql', 'database', 'sql', 'migrations'],\n        enabled: true,\n        configSchema: {\n            title: 'PostgreSQL Configuration',\n            fields: [\n                {\n                    name: 'version',\n                    label: 'PostgreSQL Version',\n                    type: 'select',\n                    options: ['13.x', '14.x', '15.x', '16.x'],\n                    default: '15.x'\n                },\n                {\n                    name: 'enableSSL',\n                    label: 'Enable SSL Connection',\n                    type: 'checkbox',\n                    default: true,\n                    description: 'Use SSL for database connections in production'\n                },\n                {\n                    name: 'maxConnections',\n                    label: 'Max Connection Pool Size',\n                    type: 'range',\n                    min: 5,\n                    max: 50,\n                    default: 20\n                },\n                {\n                    name: 'backupSchedule',\n                    label: 'Backup Schedule',\n                    type: 'select',\n                    options: ['daily', 'weekly', 'monthly', 'disabled'],\n                    default: 'daily',\n                    description: 'Automated backup schedule'\n                }\n            ]\n        }\n    },\n    // DevOps Plugins\n    'docker-compose': {\n        id: 'docker-compose',\n        name: 'Docker + Compose',\n        icon: 'üê≥',\n        version: '24.0',\n        category: 'devops',\n        description: 'Complete Docker setup with multi-stage builds, compose configurations, and production optimization.',\n        tags: ['docker', 'containerization', 'devops'],\n        enabled: true,\n        configSchema: {\n            title: 'Docker Configuration',\n            fields: [\n                {\n                    name: 'baseImage',\n                    label: 'Base Image',\n                    type: 'select',\n                    options: ['alpine', 'ubuntu', 'debian'],\n                    default: 'alpine',\n                    description: 'Base Docker image for containers'\n                },\n                {\n                    name: 'multiStage',\n                    label: 'Multi-stage Build',\n                    type: 'checkbox',\n                    default: true,\n                    description: 'Use multi-stage builds for smaller production images'\n                },\n                {\n                    name: 'includeNginx',\n                    label: 'Include Nginx Reverse Proxy',\n                    type: 'checkbox',\n                    default: true\n                }\n            ]\n        }\n    },\n    'gitlab-ci': {\n        id: 'gitlab-ci',\n        name: 'GitLab CI/CD',\n        icon: 'ü¶ä',\n        version: '16.0',\n        category: 'devops',\n        description: 'GitLab CI/CD pipeline with automated testing, building, and deployment stages.',\n        tags: ['gitlab', 'cicd', 'automation', 'deployment'],\n        enabled: true,\n        configSchema: {\n            title: 'GitLab CI/CD Configuration',\n            fields: [\n                {\n                    name: 'stages',\n                    label: 'Pipeline Stages',\n                    type: 'checkbox',\n                    options: [\n                        { value: 'test', label: 'Test', default: true },\n                        { value: 'build', label: 'Build', default: true },\n                        { value: 'security-scan', label: 'Security Scan', default: true },\n                        { value: 'deploy-staging', label: 'Deploy to Staging', default: true },\n                        { value: 'deploy-prod', label: 'Deploy to Production', default: false }\n                    ]\n                },\n                {\n                    name: 'deploymentStrategy',\n                    label: 'Deployment Strategy',\n                    type: 'radio',\n                    options: [\n                        { value: 'blue-green', label: 'Blue-Green Deployment' },\n                        { value: 'rolling', label: 'Rolling Update' },\n                        { value: 'canary', label: 'Canary Deployment' }\n                    ],\n                    default: 'rolling'\n                },\n                {\n                    name: 'notificationChannel',\n                    label: 'Notification Channel',\n                    type: 'text',\n                    default: '#deployments',\n                    description: 'Slack channel for deployment notifications'\n                }\n            ]\n        }\n    },\n    // Security Plugins\n    'sonarqube-analysis': {\n        id: 'sonarqube-analysis',\n        name: 'SonarQube Code Quality',\n        icon: 'üîç',\n        version: '10.0',\n        category: 'security',\n        description: 'SonarQube integration for code quality analysis, security vulnerability detection, and technical debt management.',\n        tags: ['sonarqube', 'code-quality', 'security', 'static-analysis'],\n        enabled: true,\n        configSchema: {\n            title: 'SonarQube Configuration',\n            fields: [\n                {\n                    name: 'qualityGate',\n                    label: 'Quality Gate',\n                    type: 'select',\n                    options: ['Sonar way', 'Custom', 'Strict'],\n                    default: 'Sonar way',\n                    description: 'Quality gate to enforce code standards'\n                },\n                {\n                    name: 'coverageThreshold',\n                    label: 'Code Coverage Threshold (%)',\n                    type: 'range',\n                    min: 50,\n                    max: 100,\n                    default: 80,\n                    description: 'Minimum code coverage required to pass quality gate'\n                },\n                {\n                    name: 'includeSecurityHotspots',\n                    label: 'Include Security Hotspot Analysis',\n                    type: 'checkbox',\n                    default: true\n                }\n            ]\n        }\n    },\n    // Monitoring Plugins\n    'prometheus-grafana': {\n        id: 'prometheus-grafana',\n        name: 'Prometheus + Grafana',\n        icon: 'üìä',\n        version: '2.45.0',\n        category: 'monitoring',\n        description: 'Complete monitoring stack with Prometheus metrics collection and Grafana dashboards.',\n        tags: ['prometheus', 'grafana', 'monitoring', 'metrics'],\n        enabled: false,\n        configSchema: {\n            title: 'Monitoring Configuration',\n            fields: [\n                {\n                    name: 'metricsEndpoint',\n                    label: 'Metrics Endpoint',\n                    type: 'text',\n                    default: '/actuator/prometheus',\n                    description: 'Endpoint for metrics collection'\n                },\n                {\n                    name: 'retentionPeriod',\n                    label: 'Data Retention Period',\n                    type: 'select',\n                    options: ['7d', '15d', '30d', '90d', '1y'],\n                    default: '30d'\n                },\n                {\n                    name: 'alerting',\n                    label: 'Enable Alerting',\n                    type: 'checkbox',\n                    default: true,\n                    description: 'Configure alerts for critical metrics'\n                }\n            ]\n        }\n    }\n}"
                }
            ],
            "src/app/app.routes.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Routes",
                    "defaultValue": "[\n  { path: '', redirectTo: 'wizard', pathMatch: 'full' },\n  { path: 'wizard', component: WizardComponent }\n]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "children": [
            {
                "name": "WizardComponent",
                "kind": "component",
                "path": "wizard",
                "filename": "src/app/app.routes.ts"
            }
        ]
    },
    "coverage": {
        "count": 4,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/plugin-config-step/plugin-config-step.ts",
                "type": "component",
                "linktype": "component",
                "name": "PluginConfigStepComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/components/plugin-manager/plugin-manager.ts",
                "type": "component",
                "linktype": "component",
                "name": "PluginManagerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/components/progress-bar/progress-bar.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/project-info-step/project-info-step.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectInfoStepComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/review-step/review-step.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReviewStepComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/components/wizard/wizard.ts",
                "type": "component",
                "linktype": "component",
                "name": "WizardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/plugin-registry.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConfigSchema",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/plugin-registry.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Field",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/services/plugin-registry.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Plugin",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/services/plugin-registry.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pluginRegistry",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/wizard-state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WizardStateService",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}