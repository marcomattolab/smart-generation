{
    "pipes": [
        {
            "name": "CustomCurrencyPipe",
            "id": "pipe-CustomCurrencyPipe-2b996fde606a0fc850af41a817edb4246add2a3eacbbf5d9aeb0af297d5d030db37f364be4b086a2e53e4051d52132d3d3aada9529ffaee2dc14fa98e0445aa0",
            "file": "src/app/shared/pipe/custom-currency.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "locale",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "AppConstants.COMMON.DEFAULT_DATE_LOCAL"
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "locale",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "AppConstants.COMMON.DEFAULT_DATE_LOCAL",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "ngname": "customCurrency",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { AppConstants } from '../../models/constant/app-constant';\n\n@Pipe({\n  name: 'customCurrency',\n})\nexport class CustomCurrencyPipe implements PipeTransform {\n  transform(value: number, locale = AppConstants.COMMON.DEFAULT_DATE_LOCAL): string | null {\n    if (value == null) {\n      return null;\n    }\n    const formattedValue = new Intl.NumberFormat(locale, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(value);\n    return formattedValue;\n  }\n}\n"
        },
        {
            "name": "DateFormatPipe",
            "id": "pipe-DateFormatPipe-a327a54cdcaa2d107f626caa29b0ce9cb73cf5b6793a195df2170832ab66b87b4379a4210c2326048d284f4aead26eaff14e553ce6446530c090186583bb3f20",
            "file": "src/app/shared/pipe/date-format.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [
                {
                    "name": "datePipe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DatePipe",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "type",
                            "type": "DATE_FORMATS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "DATE_FORMATS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "ngname": "dateFormat",
            "sourceCode": "import { DatePipe } from '@angular/common';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { AppConstants } from '../../models/constant/app-constant';\n\nexport enum DATE_FORMATS {\n  DAYDATE,\n  MONTHDATE,\n  FULLDATE, // default\n}\n@Pipe({\n  name: 'dateFormat',\n})\nexport class DateFormatPipe implements PipeTransform {\n  constructor(public datePipe: DatePipe) {}\n\n  transform(value?: string, type?: DATE_FORMATS) {\n    let format = AppConstants.COMMON.DEFAULT_DATE_FORMAT; // => 'dd.MM.yyyy'\n\n    if (type == DATE_FORMATS.DAYDATE) {\n      format = 'dd';\n    }\n\n    if (type == DATE_FORMATS.MONTHDATE) {\n      format = 'MM.yyyy';\n    }\n\n    return this.datePipe.transform(value, format);\n  }\n}\n"
        },
        {
            "name": "PhoneNumberPipe",
            "id": "pipe-PhoneNumberPipe-78701da96819cbc5c7b61b076aea7291f22c5e805ead2a508a22646bc81d07207e93f107b326a010b249a427cf99dcc0f607fc0a44e5daa1a231e503da0341cb",
            "file": "src/app/shared/pipe/phone-number.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "ngname": "phoneNumber",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'phoneNumber',\n})\nexport class PhoneNumberPipe implements PipeTransform {\n  transform(value: string): string {\n    if (!value) {\n      return value;\n    }\n\n    // Remove non-numeric characters from the input phone number\n    const numericValue = value.replace(/\\D/g, '');\n\n    // Format the phone number as \"+CC NPA NXX XXXX\"\n    const countryCode = numericValue.slice(0, 2);\n    const npa = numericValue.slice(2, 5);\n    const nxx = numericValue.slice(5, 8);\n    const xxxx = numericValue.slice(8);\n\n    return `+${countryCode} ${npa} ${nxx} ${xxxx}`;\n  }\n}\n"
        },
        {
            "name": "TruncatePipe",
            "id": "pipe-TruncatePipe-e7755310902a3621a6532d3c4c6652412285583029a7766fd06003e86d08b844b6c18bf4b90b76fb3b216b75ce840ac7cd4baf2114c0070ec8db329594a92db0",
            "file": "src/app/shared/pipe/truncate.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxLength",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxLength",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "standalone": false,
            "ngname": "truncate",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'truncate',\n})\nexport class TruncatePipe implements PipeTransform {\n  transform(text: string, maxLength: number): string {\n    if (!text) {\n      return ''; // Return empty string for undefined or empty text\n    }\n\n    if (text.length > maxLength) {\n      return text.substring(0, maxLength - 3) + '...';\n    }\n\n    return text;\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "IMenuItem",
            "id": "interface-IMenuItem-478844d92c7377f14c0ffba7dca53b28a008823e3078062bc403042f3765646bfb0c6b02d5da3765556fee072fce95fe142018cd944345b971eec8d9713f7d9a",
            "file": "src/app/services/menu.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\n\r\nexport interface IMenuItem {\r\n  code: string;\r\n  link: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MenuService {\r\n  /**\r\n   * GET Menu Items\r\n   * @returns IMenuItem[]\r\n   */\r\n  public getMenuItems(): Observable<IMenuItem[]> {\r\n    const menuItems: IMenuItem[] = [\r\n      { code: 'home', link: '/home' },\r\n      { code: 'Todos', link: '/todo' },\r\n      { code: 'Products', link: '/product' }\r\n    ];\r\n    return of(menuItems);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IProduct",
            "id": "interface-IProduct-08f1d20a1972b98389fd048aa6e095be2b371a26336b56bf3d642b088639cc60670611c6227c5cc9562ee6cf107e84911d81b1a7402a5d788bc4b91a30b7313a",
            "file": "src/app/models/page/product.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IProduct {\n  id: number;\n  name: string;\n  price: number;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ITodo",
            "id": "interface-ITodo-28782e1abe3c95883c42cb6b67193c805ccee3e170ecf4098c754cb6fdbf0beb4d654cd98390edbd17e3595ff6b443ed284e201481919635ebe46ea667bca843",
            "file": "src/app/models/page/todo.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ITodo {\n  id: string;\n  title: string;\n  completed: boolean;\n  createdAt: Date;\n}\n",
            "properties": [
                {
                    "name": "completed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "WizardStateModel",
            "id": "interface-WizardStateModel-db48320d32f007b5c6a77c5eb3067ed6f8b17ec0af862f234834defeac1a92313dafab91e8f3ffdc37f43e10ca1d7e7381a92bbdec3dda55eba7624f3eebe6e5",
            "file": "src/app/models/page/wizard-state.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface WizardStateModel {\r\n  currentStep: number;\r\n  projectInfo: {\r\n    projectName: string;\r\n    projectDescription: string;\r\n    organization: string;\r\n    packageName: string;\r\n  };\r\n  techStack: {\r\n    backend: string;\r\n    frontend: string;\r\n    mobile: string;\r\n    database: string;\r\n  };\r\n  infrastructure: {\r\n    ci_cd: string[];\r\n    containerization: string[];\r\n    quality: string[];\r\n    security: string[];\r\n  };\r\n}\r\n",
            "properties": [
                {
                    "name": "currentStep",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "infrastructure",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "projectInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "techStack",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AppConfigService",
            "id": "injectable-AppConfigService-c8bf7843442c7f2650b09ab83ccc75a2d36a78bd606affa08dffe1e22d3476ff5448f6ed4eb2f67393200ab7e811870bd7441283c1b71466ac5beef410c6dc2c",
            "file": "src/app/services/app-config.service.ts",
            "properties": [
                {
                    "name": "appConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "http",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadAppConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable()\nexport class AppConfigService {\n  private readonly http = inject(HttpClient);\n\n  private appConfig: any;\n\n  loadAppConfig() {\n    return this.http.get('/assets/conf/appConfig.json')\n      .toPromise()\n      .then(data => {\n        this.appConfig = data;\n      });\n  }\n\n  getConfig() {\n    return this.appConfig;\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "LanguageService",
            "id": "injectable-LanguageService-4d537294b7e6c24c01cd986ea2b3eec7f88ab6c249f6d9071c6bf3849ad47e4b3924b883505f88a9384971a7fad154cc4706e51fe4cd69042207ef9950a4a1b3",
            "file": "src/app/services/language.service.ts",
            "properties": [
                {
                    "name": "translateService",
                    "defaultValue": "inject(TranslateService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "changeLanguage",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDefaultLanguage",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LanguageService {\r\n  private readonly translateService= inject(TranslateService);\r\n\r\n  setDefaultLanguage(lang: string): void {\r\n    this.translateService.setDefaultLang(lang);\r\n    this.translateService.use(lang);\r\n  }\r\n\r\n  changeLanguage(lang: string): void {\r\n    this.translateService.use(lang);\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "LoadingService",
            "id": "injectable-LoadingService-31691746f8f317a25d19e0c092a7cbab18cde2ac55593b980650c49fbde6ceaa154f883d0bf9957748a1ca02f69e7c8b1b04a09385c18b4c3355020b5463828b",
            "file": "src/app/services/loading.service.ts",
            "properties": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getLoading",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setLoading",
                    "args": [
                        {
                            "name": "loading",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "loading",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LoadingService {\r\n  private loading: boolean = false;\r\n\r\n  setLoading(loading: boolean) {\r\n    this.loading = loading;\r\n  }\r\n\r\n  getLoading(): boolean {\r\n    return this.loading;\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "MenuService",
            "id": "injectable-MenuService-478844d92c7377f14c0ffba7dca53b28a008823e3078062bc403042f3765646bfb0c6b02d5da3765556fee072fce95fe142018cd944345b971eec8d9713f7d9a",
            "file": "src/app/services/menu.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getMenuItems",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IMenuItem[]>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGET Menu Items\n",
                    "description": "<p>GET Menu Items</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 260,
                                "end": 267,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>IMenuItem[]</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\n\r\nexport interface IMenuItem {\r\n  code: string;\r\n  link: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MenuService {\r\n  /**\r\n   * GET Menu Items\r\n   * @returns IMenuItem[]\r\n   */\r\n  public getMenuItems(): Observable<IMenuItem[]> {\r\n    const menuItems: IMenuItem[] = [\r\n      { code: 'home', link: '/home' },\r\n      { code: 'Todos', link: '/todo' },\r\n      { code: 'Products', link: '/product' }\r\n    ];\r\n    return of(menuItems);\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ProductService",
            "id": "injectable-ProductService-94c85ab87e7f5200eb584411c366799e1e587758891b22aaaf5b7115770943426a0e86ae1a133aa5295365a63683ecf2e4bbc60de6e9d270033c7139e4b869bc",
            "file": "src/app/services/product.service.ts",
            "properties": [
                {
                    "name": "appConfigService",
                    "defaultValue": "inject(AppConfigService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "baseUrl",
                    "defaultValue": "this.appConfigService.getConfig().baseUrl + '/product'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "http",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createProduct",
                    "args": [
                        {
                            "name": "productData",
                            "type": "IProduct",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IProduct>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "productData",
                            "type": "IProduct",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteProduct",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProducts",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IProduct[]>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateProduct",
                    "args": [
                        {
                            "name": "productData",
                            "type": "IProduct",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IProduct>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "productData",
                            "type": "IProduct",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { AppConfigService } from './app-config.service';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { IProduct } from '../models/page/product.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n  private readonly http = inject(HttpClient);\n  private readonly appConfigService = inject(AppConfigService);\n\n  // => private readonly baseUrl = this.appConfigService.getConfig().baseUrl + '/hello';\n  private readonly baseUrl = this.appConfigService.getConfig().baseUrl + '/product';\n\n  getProducts(): Observable<IProduct[]> {\n    //=> console.log(\"baseUrl: \"+this.baseUrl);\n    return this.http.get<IProduct[]>(this.baseUrl).pipe(\n      catchError(error => this.handleError(error))\n    );\n  }\n\n  createProduct(productData: IProduct): Observable<IProduct> {\n    return this.http.post<IProduct>(this.baseUrl, productData).pipe(\n      catchError(error => this.handleError(error))\n    );\n  }\n\n  updateProduct(productData: IProduct): Observable<IProduct> {\n    return this.http.put<IProduct>(`${this.baseUrl}/${productData.id}`, productData).pipe(\n      catchError(error => this.handleError(error))\n    );\n  }\n\n  deleteProduct(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.baseUrl}/${id}`).pipe(\n      catchError(error => this.handleError(error))\n    );\n  }\n\n  private handleError(error: any): Observable<never> {\n    console.error('Some error occurred', error);\n    return throwError(() => new Error(error.message || error));\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TodoService",
            "id": "injectable-TodoService-00cc5865ac9fb015e07e06c35e228c12e3b9b20eeb65aee90b67a36e915011dc6401d3643278c6fc31c4d2f8a2b26b42e78f1d2e0d0a2899e4782b54c07ad2d9",
            "file": "src/app/services/todo.service.ts",
            "properties": [
                {
                    "name": "appConfigService",
                    "defaultValue": "inject(AppConfigService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "baseUrl",
                    "defaultValue": "this.appConfigService.getConfig().baseUrl + '/api/todos'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "http",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createTodo",
                    "args": [
                        {
                            "name": "todoData",
                            "type": "ITodo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ITodo>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "todoData",
                            "type": "ITodo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteTodo",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTodos",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ITodo[]>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTodo",
                    "args": [
                        {
                            "name": "todoData",
                            "type": "ITodo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ITodo>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "todoData",
                            "type": "ITodo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { AppConfigService } from './app-config.service';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { ITodo } from '../models/page/todo.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TodoService {\n  private readonly http = inject(HttpClient);\n  private readonly appConfigService = inject(AppConfigService);\n\n  private readonly baseUrl = this.appConfigService.getConfig().baseUrl + '/api/todos';\n\n  getTodos(): Observable<ITodo[]> {\n    //=> console.log(\"baseUrl: \"+this.baseUrl);\n    return this.http.get<ITodo[]>(this.baseUrl).pipe(\n      catchError(error => this.handleError(error))\n    );\n  }\n\n  createTodo(todoData: ITodo): Observable<ITodo> {\n    return this.http.post<ITodo>(this.baseUrl, todoData).pipe(\n      catchError(error => this.handleError(error))\n    );\n  }\n\n  updateTodo(todoData: ITodo): Observable<ITodo> {\n    return this.http.put<ITodo>(`${this.baseUrl}/${todoData.id}`, todoData).pipe(\n      catchError(error => this.handleError(error))\n    );\n  }\n\n  deleteTodo(id: string): Observable<void> {\n    return this.http.delete<void>(`${this.baseUrl}/${id}`).pipe(\n      catchError(error => this.handleError(error))\n    );\n  }\n\n  private handleError(error: any): Observable<never> {\n    console.error('Some error occurred', error);\n    return throwError(() => new Error(error.message || error));\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "WizardStateService",
            "id": "injectable-WizardStateService-3973a76083efc71aaf9781e23b4b3dd02a1ecd93c01a96f9ab3d04aa772403dd51568674cf6a07ce41235189305fc680c36833924d89eb0917fa38f60ecea6a1",
            "file": "src/app/services/wizard-state.ts",
            "properties": [
                {
                    "name": "_state",
                    "defaultValue": "signal(initialState)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "currentStep",
                    "defaultValue": "computed(() => this._state().currentStep)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "infrastructure",
                    "defaultValue": "computed(() => this._state().infrastructure)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "isGenerated",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "isLastStep",
                    "defaultValue": "computed(() => this.currentStep() === this.steps().length)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "isLoading",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "projectInfo",
                    "defaultValue": "computed(() => this._state().projectInfo)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "steps",
                    "defaultValue": "signal([\r\n    { label: 'Project Info' },\r\n    { label: 'Tech Stack' },\r\n    { label: 'Infrastructure' },\r\n    { label: 'Review' }\r\n  ])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "techStack",
                    "defaultValue": "computed(() => this._state().techStack)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "goToStep",
                    "args": [
                        {
                            "name": "step",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "step",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nextStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "previousStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "simulate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateInfrastructure",
                    "args": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateProjectInfo",
                    "args": [
                        {
                            "name": "projectInfo",
                            "type": "Partial<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "projectInfo",
                            "type": "Partial<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTechStack",
                    "args": [
                        {
                            "name": "techStack",
                            "type": "Partial<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "techStack",
                            "type": "Partial<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, signal, computed } from '@angular/core';\r\nimport { WizardStateModel } from \"../models/page/wizard-state.model\";\r\nimport { AppConstants } from \"../models/constant/app-constant\";\r\n\r\nconst initialState: WizardStateModel = {\r\n  currentStep: 1,\r\n  projectInfo: {\r\n    projectName: '',\r\n    projectDescription: '',\r\n    organization: AppConstants.COMMON.COMPANY_NAME,\r\n    packageName: ''\r\n  },\r\n  techStack: {\r\n    backend: '',\r\n    frontend: '',\r\n    mobile: '',\r\n    database: ''\r\n  },\r\n  infrastructure: {\r\n    ci_cd: ['gitlab-ci'],\r\n    containerization: ['docker', 'docker-compose', 'nginx'],\r\n    quality: ['sonarqube', 'eslint', 'unit-tests', 'integration-tests'],\r\n    security: ['oauth2', 'jwt', 'cors', 'ssl']\r\n  }\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WizardStateService {\r\n  private readonly _state = signal(initialState);\r\n  readonly steps = signal([\r\n    { label: 'Project Info' },\r\n    { label: 'Tech Stack' },\r\n    { label: 'Infrastructure' },\r\n    { label: 'Review' }\r\n  ]);\r\n  readonly isLoading = signal(false);\r\n  readonly isGenerated = signal(false);\r\n\r\n  // Selectors\r\n  readonly currentStep = computed(() => this._state().currentStep);\r\n  readonly projectInfo = computed(() => this._state().projectInfo);\r\n  readonly techStack = computed(() => this._state().techStack);\r\n  readonly infrastructure = computed(() => this._state().infrastructure);\r\n  readonly isLastStep = computed(() => this.currentStep() === this.steps().length);\r\n\r\n  // Actions\r\n  nextStep() {\r\n    if (!this.isLastStep()) {\r\n      this._state.update(state => ({ ...state, currentStep: state.currentStep + 1 }));\r\n    }\r\n  }\r\n\r\n  previousStep() {\r\n    this._state.update(state => ({ ...state, currentStep: state.currentStep - 1 }));\r\n  }\r\n\r\n  goToStep(step: number) {\r\n    // Allow navigation only to previously visited steps\r\n    if (step < this.currentStep()) {\r\n      this._state.update(state => ({ ...state, currentStep: step }));\r\n    }\r\n  }\r\n\r\n  updateProjectInfo(projectInfo: Partial<WizardStateModel['projectInfo']>) {\r\n    this._state.update(state => ({ ...state, projectInfo: { ...state.projectInfo, ...projectInfo } }));\r\n  }\r\n\r\n  updateTechStack(techStack: Partial<WizardStateModel['techStack']>) {\r\n    this._state.update(state => ({ ...state, techStack: { ...state.techStack, ...techStack } }));\r\n  }\r\n\r\n  updateInfrastructure(key: keyof WizardStateModel['infrastructure'], value: string) {\r\n    this._state.update(state => {\r\n      const currentValues = state.infrastructure[key];\r\n      const newValues = currentValues.includes(value)\r\n        ? currentValues.filter(v => v !== value)\r\n        : [...currentValues, value];\r\n      return {\r\n        ...state,\r\n        infrastructure: {\r\n          ...state.infrastructure,\r\n          [key]: newValues\r\n        }\r\n      };\r\n    });\r\n  }\r\n\r\n  simulate() {\r\n    this.isLoading.set(true);\r\n    console.log('Simulating project generation with the following state:', this._state());\r\n    setTimeout(() => {\r\n      this.isLoading.set(false);\r\n      this.isGenerated.set(true);\r\n    }, 3000);\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [
        {
            "name": "HandleErrorsInterceptor",
            "id": "injectable-HandleErrorsInterceptor-8d280b0ce27cf16bc3ba524f2167b931504c9f64f1a725132ecb2069f6f7cf1c4b314810af7859d48e33dacc6a9f13e36cde9ffe4cad857e8ca2c0be2e86c380",
            "file": "src/app/shared/interceptors/handle-errors.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<>>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class HandleErrorsInterceptor implements HttpInterceptor {\n  constructor(private readonly route: Router) {}\n\n  public intercept(req: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    if (req.method !== 'DELETE' && req.headers.has('X-Exclude-Interceptor')) {\n      return next.handle(req).pipe(\n        catchError((err: HttpErrorResponse) => {\n          this.route.navigate(['**']);\n          const error = new Error(err?.message);\n          return throwError(() => error);\n        })\n      ) as Observable<HttpEvent<unknown>>;\n    } else {\n      return next.handle(req);\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "interceptor"
        },
        {
            "name": "LoadingInterceptor",
            "id": "injectable-LoadingInterceptor-486b2bb5ebb2a6ba2119f2d710f9ec8e3a874accff7f7e52ac9fa37aa903c3fbaacfe77374c9644d8eee05767d2f1e8d423fe421fc87e62a3ee4ab81de49b53b",
            "file": "src/app/shared/interceptors/loading.interceptor.ts",
            "properties": [
                {
                    "name": "totalRequests",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<>>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nimport { Observable } from 'rxjs';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { LoadingService } from '../../services/loading.service';\r\n\r\n@Injectable()\r\nexport class LoadingInterceptor implements HttpInterceptor {\r\n  private totalRequests = 0;\r\n\r\n  constructor(\r\n    private readonly loadingService: LoadingService,\r\n    private readonly spinner: NgxSpinnerService\r\n  ) {}\r\n\r\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n    this.totalRequests++;\r\n    if (this.totalRequests > 0) {\r\n      this.loadingService.setLoading(true);\r\n      this.spinner.show();\r\n    }\r\n    return next.handle(request).pipe(\r\n      finalize(() => {\r\n        this.totalRequests--;\r\n        if (this.totalRequests === 0) {\r\n          this.loadingService.setLoading(false);\r\n          this.spinner.hide();\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loadingService",
                        "type": "LoadingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "spinner",
                        "type": "NgxSpinnerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "loadingService",
                        "type": "LoadingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spinner",
                        "type": "NgxSpinnerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "interceptor"
        }
    ],
    "classes": [],
    "directives": [
        {
            "name": "IfLoggedDirective",
            "id": "directive-IfLoggedDirective-a11e39a6bd39efbfd15c192ff291193ed1ce2d5363b7644a967d04e9c97cb477c721d094a817873c818e6ed3d21f87a78957ff3e2084c45a4ffb7b48b5362200",
            "file": "src/app/shared/directives/if-logged.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, TemplateRef, ViewContainerRef, inject } from '@angular/core';\nimport { OidcSecurityService } from 'angular-auth-oidc-client';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { distinctUntilChanged } from 'rxjs';\n\n@Directive({\n  selector: '[appIfLogged]'\n})\nexport class IfLoggedDirective {\n  private readonly oidcSecurityService = inject(OidcSecurityService);\n  private readonly template = inject(TemplateRef<unknown>);\n  private readonly view = inject(ViewContainerRef);\n\n  constructor() {\n    this.oidcSecurityService.isAuthenticated$\n      .pipe(\n        distinctUntilChanged(),\n        takeUntilDestroyed()\n      )\n      .subscribe(({ isAuthenticated }) => {\n        if (isAuthenticated) {\n          this.view.createEmbeddedView(this.template);\n        } else {\n          this.view.clear();\n        }\n      });\n  }\n}\n",
            "selector": "[appIfLogged]",
            "providers": [],
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "oidcSecurityService",
                    "defaultValue": "inject(OidcSecurityService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "template",
                    "defaultValue": "inject(TemplateRef<unknown>)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "view",
                    "defaultValue": "inject(ViewContainerRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            }
        },
        {
            "name": "IfRoleDirective",
            "id": "directive-IfRoleDirective-746578e88d940dd880f0abf48317ebf65c2d35de3954ccaa4da5f335b5aaaf523e0de6e8601388a7296a5a14b48819763da89102f7499620b7ced168a5163509",
            "file": "src/app/shared/directives/if-role.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, TemplateRef, ViewContainerRef, inject } from '@angular/core';\nimport { OidcSecurityService } from 'angular-auth-oidc-client';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { distinctUntilChanged } from 'rxjs';\n\n@Directive({\n  selector: '[appIfRole]'\n})\nexport class IfRoleDirective {\n  @Input() appIfRole: string[] = [];\n\n  private readonly oidcSecurityService = inject(OidcSecurityService);\n  private readonly template = inject(TemplateRef<unknown>);\n  private readonly view = inject(ViewContainerRef);\n\n  constructor() {\n    this.oidcSecurityService.userData$\n      .pipe(\n        distinctUntilChanged(),\n        takeUntilDestroyed()\n      )\n      .subscribe(({ userData }) => {\n        if (userData && userData.roles && this.appIfRole.some(role => userData.roles.includes(role))) {\n          this.view.createEmbeddedView(this.template);\n        } else {\n          this.view.clear();\n        }\n      });\n  }\n}\n",
            "selector": "[appIfRole]",
            "providers": [],
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [
                {
                    "name": "appIfRole",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "oidcSecurityService",
                    "defaultValue": "inject(OidcSecurityService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "template",
                    "defaultValue": "inject(TemplateRef<unknown>)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "view",
                    "defaultValue": "inject(ViewContainerRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            }
        }
    ],
    "components": [
        {
            "name": "AboutPage",
            "id": "component-AboutPage-354d96ad91a988272537b651cf223343bc49694f78f360a943cb203cd28a2270ab299dc212f231b9181cf4a2e83bee442572643c6201eaedc5284a1cb4a8b66e",
            "file": "src/app/pages/about-page/about-page.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-about-page",
            "styleUrls": [
                "./about-page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./about-page.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-about-page',\n  templateUrl: './about-page.html',\n  styleUrls: ['./about-page.scss'],\n  imports: [CommonModule],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AboutPage {\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./about-page.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"bg-gray-100 min-h-screen\">\n  <div class=\"container mx-auto py-16 px-6\">\n    <div class=\"text-center mb-12\">\n      <h1 class=\"text-5xl font-extrabold text-gray-800\">About Skelify</h1>\n      <p class=\"text-lg text-gray-600 mt-2\">Learn more about our mission and our team.</p>\n    </div>\n\n    <div class=\"max-w-4xl mx-auto\">\n      <div class=\"bg-white rounded-lg shadow-xl p-8 mb-8\">\n        <h2 class=\"text-3xl font-bold text-gray-700 mb-4\">What is Skelify?</h2>\n        <p class=\"text-gray-600 leading-relaxed\">\n          Skelify is a smart skeleton generator designed to accelerate the software development lifecycle. By automating the repetitive and time-consuming tasks of project setup and configuration, Skelify allows developers to focus on what matters most: building great software.\n        </p>\n      </div>\n\n      <div class=\"bg-white rounded-lg shadow-xl p-8 mb-8\">\n        <h2 class=\"text-3xl font-bold text-gray-700 mb-4\">Our Mission</h2>\n        <p class=\"text-gray-600 leading-relaxed\">\n          Our mission is to provide a powerful and flexible tool that enforces best practices, ensures consistency across projects, and dramatically reduces the time it takes to get from idea to a working skeleton.\n        </p>\n      </div>\n\n      <div class=\"bg-white rounded-lg shadow-xl p-8\">\n        <h2 class=\"text-3xl font-bold text-gray-700 mb-4\">Our Team</h2>\n        <p class=\"text-gray-600 leading-relaxed\">\n          Skelify is built by a passionate team of developers at ELCA.\n        </p>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "App",
            "id": "component-App-c5269759ee5a64923ac44f0f6d1695c16edabc1088250c1e54d9155700b1dac3107d358c29257ecb1e767812f4e1f6912fb018c9e6f9f70fbf8b9c7a2574d8ee",
            "file": "src/app/app.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "translate",
                    "defaultValue": "inject(TranslateService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "LayoutHorizontal"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { LayoutHorizontal } from './core/layout/layout-horizontal/layout-horizontal.component';\nimport { TranslateService } from '@ngx-translate/core';\nimport { AppConstants } from './models/constant/app-constant';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.html',\n  imports: [RouterOutlet, CommonModule, LayoutHorizontal],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class App {\n  private readonly translate = inject(TranslateService);\n\n  constructor() {\n    const appLanguage = AppConstants.COMMON.DEFAULT_LANGUAGE\n    this.translate.setDefaultLang(appLanguage);\n    this.translate.use(appLanguage);\n  }\n\n  /*private oidc = inject(OidcSecurityService);\n  isAuthenticated = false;\n  userData: any;\n\n  constructor() {\n    this.oidc.checkAuth().subscribe((auth) => {\n      this.isAuthenticated = auth.isAuthenticated;\n      if (auth.isAuthenticated) {\n        this.oidc.getUserData().subscribe((user) => (this.userData = user));\n      }\n    });\n  }\n\n  login() {\n    this.oidc.authorize();\n  }\n\n  logout() {\n    this.oidc.logoff();\n  }\n  */\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "extends": [],
            "templateData": "\r\n<app-layout-horizontal>\r\n    <router-outlet></router-outlet>\r\n</app-layout-horizontal>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d7bf0323e6da130e2609e2af0117b4a8d7cd874132206af50bf43dfc37044485fe50f2867ea76525730dd195b9b95a43802a12dadc6ad5cd7bf2faa07f19f0da",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": " <button  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 760,
                            "end": 773,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 761,
                                "end": 769,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /** Is this the principal call to action on the page? */\n  @Input()\n  primary = false;\n\n  /** What background color to use */\n  @Input()\n  backgroundColor?: string;\n\n  /** How large should the button be? */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /** Optional click handler */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #555ab9;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "DownloadModal",
            "id": "component-DownloadModal-b25f72fa7b2f2c5d6b29a29a4564cf7466ba642d474f8d93a99937b5bc5ce4165fec1281de774dd6d762e26f6b92832d70dc4719b77af696dbb36fae0df2f91d",
            "file": "src/app/components/download-modal/download-modal.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-download-modal",
            "styleUrls": [
                "./download-modal.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./download-modal.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "required": false
                }
            ],
            "outputsClass": [
                {
                    "name": "closeModal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "void",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "required": false
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, input, output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-download-modal',\n  templateUrl: './download-modal.html',\n  styleUrls: ['./download-modal.scss'],\n  imports: [CommonModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DownloadModal {\n  isOpen = input<boolean>(false);\n  closeModal = output<void>();\n\n  onClose() {\n    this.closeModal.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: contents;\n}\n",
                    "styleUrl": "./download-modal.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "@if (isOpen()) {\n  <div class=\"fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center z-50\">\n    <div class=\"bg-white rounded-lg shadow-2xl w-full max-w-lg mx-4 sm:mx-0\">\n      <div class=\"p-6\">\n        <div class=\"flex justify-between items-start\">\n          <h3 class=\"text-2xl font-bold text-gray-800\">Download Project</h3>\n          <button (click)=\"onClose()\" class=\"text-gray-400 hover:text-gray-600 transition\">\n            <svg class=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path></svg>\n          </button>\n        </div>\n        <div class=\"mt-4 text-gray-600 space-y-4\">\n          <p>Your project is ready to be downloaded as a ZIP file. This will include:</p>\n          <ul class=\"list-disc list-inside space-y-2\">\n            <li>Complete source code skeleton</li>\n            <li>Docker configuration files</li>\n            <li>CI/CD pipeline configurations</li>\n            <li>Database migration scripts</li>\n            <li>Documentation and README files</li>\n            <li>Security and authentication setup</li>\n          </ul>\n          <p class=\"font-semibold text-purple-700\">This is a POC demo - in production, this would trigger the actual project generation and download.</p>\n        </div>\n        <div class=\"mt-6 flex justify-end space-x-4\">\n          <button (click)=\"onClose()\" class=\"btn btn-secondary\">\n            Cancel\n          </button>\n          <button (click)=\"onClose()\" class=\"btn btn-primary\">\n            Download\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n}\n"
        },
        {
            "name": "Footer",
            "id": "component-Footer-34d9492b62a4598c22343176d9c0046f2e8ec7be49e0734938580cff5ed593b5e601fbdca15ee206088359e662e62d941de1bf71595523a1be137eaf3cf75d18",
            "file": "src/app/core/layout/footer/footer.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./footer.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\n@Component({\r\n  selector: 'app-footer',\r\n  imports: [CommonModule, RouterModule, TranslateModule],\r\n  templateUrl: './footer.html',\r\n  styleUrl: './footer.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class Footer {\r\n}\r\n",
            "styleUrl": "./footer.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<footer class=\"app-footer\">\n  {{ 'global.footer' | translate }}\n</footer>\n"
        },
        {
            "name": "Header",
            "id": "component-Header-9ff6c96522234efe67dd6d5fe78232507b01cbdd9f8d50267c6226f3a402d37c96aeeeaa7bb1ccb19aa47cc828a1bc301915bc9fff52076000b34db0c5fffdbe",
            "file": "src/app/core/layout/header/header.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isAuthenticated",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isMenuOpen",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "oidcSecurityService",
                    "defaultValue": "inject(OidcSecurityService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, signal, inject, OnInit } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { OidcSecurityService } from 'angular-auth-oidc-client';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.html',\n  styleUrls: ['./header.scss'],\n  imports: [CommonModule, RouterModule, TranslateModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Header implements OnInit {\n  isMenuOpen = signal(false);\n  isAuthenticated = signal(false);\n  private readonly oidcSecurityService = inject(OidcSecurityService);\n\n  ngOnInit() {\n    this.oidcSecurityService.isAuthenticated$.subscribe(({ isAuthenticated }) => {\n      this.isAuthenticated.set(isAuthenticated);\n    });\n  }\n\n  toggleMenu() {\n    this.isMenuOpen.update(value => !value);\n  }\n  \n  closeMenu() {\n    this.isMenuOpen.set(false);\n  }\n\n  login() {\n    this.oidcSecurityService.authorize();\n  }\n\n  logout() {\n    this.oidcSecurityService.logoff();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./header.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<header class=\"bg-gradient-to-br from-gray-800 to-gray-700 text-white p-4 flex justify-between items-center shadow-md\">\n  <div class=\"flex items-center\">\n    <svg class=\"w-8 h-8 mr-2 text-purple-400\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n      <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-1-13h2v6h-2zm0 8h2v2h-2z\"/>\n    </svg>\n    <a routerLink=\"/\" class=\"text-2xl font-bold tracking-wider\">{{'global.appName' | translate}}</a>\n  </div>\n\n  <div class=\"relative\" id=\"menu\">\n    <button (click)=\"toggleMenu()\" class=\"p-2 rounded-full hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white\">\n      <svg class=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 6h16M4 12h16m-7 6h7\"></path></svg>\n    </button>\n\n    @if (isMenuOpen()) {\n      <!-- Fullscreen overlay (closes menu when clicked) -->\n      <div class=\"fixed inset-0 z-40\" (click)=\"closeMenu()\"></div>\n\n      <!-- Dropdown -->\n      <div class=\"absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-50\">\n        <a (click)=\"closeMenu()\" routerLink=\"/\" class=\"dropdown-item\">Home</a>\n        <a (click)=\"closeMenu()\" [routerLink]=\"['/wizard']\" class=\"dropdown-item\">Wizard</a>\n        <a (click)=\"closeMenu()\" [routerLink]=\"['/product']\" class=\"dropdown-item\">Product</a>\n        <a (click)=\"closeMenu()\" [routerLink]=\"['/todo']\" class=\"dropdown-item\">Todo</a>\n        @if(isAuthenticated()){\n          <a (click)=\"closeMenu()\" [routerLink]=\"['/profile']\" class=\"dropdown-item\">Profile</a>\n        }\n        <a (click)=\"closeMenu()\" [routerLink]=\"['/unauthorized']\" class=\"dropdown-item\">Unauthorized</a>\n        <a (click)=\"closeMenu()\" [routerLink]=\"['/about']\" class=\"dropdown-item\">About</a>\n      </div>\n    }\n\n    @if (isAuthenticated()) {\n      <button (click)=\"logout()\" class=\"p-2 rounded-full hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white\">\n        <svg class=\"w-6 h-6\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M15.75 9V5.25A2.25 2.25 0 0013.5 3h-6a2.25 2.25 0 00-2.25 2.25v13.5A2.25 2.25 0 007.5 21h6a2.25 2.25 0 002.25-2.25V15M12 9l-3 3m0 0l3 3m-3-3h12.75\" />\n        </svg>\n      </button>\n    } @else {\n      <button (click)=\"login()\" class=\"p-2 rounded-full hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white\">\n        <svg class=\"w-6 h-6\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M8.25 9V5.25A2.25 2.25 0 0110.5 3h6a2.25 2.25 0 012.25 2.25v13.5A2.25 2.25 0 0116.5 21h-6a2.25 2.25 0 01-2.25-2.25V15m-3 0l3-3m0 0l3 3m-3-3h12.75\" />\n        </svg>\n      </button>\n    }\n  </div>\n</header>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-48b9abe37706bc42f20cfa97ed9f943678344ea7d254c0c82183c657750c2191b43486fe730c778627b2ea6aa0e2f33a7abcf3ce08b68ad18b062ad99ea97acb",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "InfrastructureStep",
            "id": "component-InfrastructureStep-62fcf4ced504c1df91a8ac8c113341d23c073792af8608aa3f3edef3430cc24e544c915a4e9b351540f0456bbee9e3a0241cb327d6cea80d823b7bdf343c31ef",
            "file": "src/app/components/infrastructure-step/infrastructure-step.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-infrastructure-step",
            "styleUrls": [
                "./infrastructure-step.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./infrastructure-step.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ciCdOptions",
                    "defaultValue": "[\r\n    { id: 'jenkins', label: 'Jenkins Pipeline' },\r\n    { id: 'gitlab-ci', label: 'GitLab CI/CD' },\r\n    { id: 'github-actions', label: 'GitHub Actions' },\r\n    { id: 'azure-devops', label: 'Azure DevOps' }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "containerizationOptions",
                    "defaultValue": "[\r\n    { id: 'docker', label: 'Docker Containers' },\r\n    { id: 'docker-compose', label: 'Docker Compose' },\r\n    { id: 'kubernetes', label: 'Kubernetes Deployment' },\r\n    { id: 'nginx', label: 'Nginx Reverse Proxy' }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "qualityOptions",
                    "defaultValue": "[\r\n    { id: 'sonarqube', label: 'SonarQube Code Quality' },\r\n    { id: 'eslint', label: 'ESLint/Prettier' },\r\n    { id: 'unit-tests', label: 'Unit Test Framework' },\r\n    { id: 'integration-tests', label: 'Integration Tests' }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "securityOptions",
                    "defaultValue": "[\r\n    { id: 'oauth2', label: 'OAuth2 Authentication' },\r\n    { id: 'jwt', label: 'JWT Token Management' },\r\n    { id: 'cors', label: 'CORS Configuration' },\r\n    { id: 'ssl', label: 'SSL/TLS Configuration' }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "wizardState",
                    "defaultValue": "inject(WizardStateService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "isInfrastructureSelected",
                    "args": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateInfrastructure",
                    "args": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { WizardStateService } from '../../services/wizard-state';\r\nimport { WizardStateModel } from '../../models/page/wizard-state.model';\r\n\r\n@Component({\r\n  selector: 'app-infrastructure-step',\r\n  templateUrl: './infrastructure-step.html',\r\n  styleUrls: ['./infrastructure-step.scss'],\r\n  imports: [CommonModule],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class InfrastructureStep {\r\n  wizardState = inject(WizardStateService);\r\n\r\n  ciCdOptions = [\r\n    { id: 'jenkins', label: 'Jenkins Pipeline' },\r\n    { id: 'gitlab-ci', label: 'GitLab CI/CD' },\r\n    { id: 'github-actions', label: 'GitHub Actions' },\r\n    { id: 'azure-devops', label: 'Azure DevOps' }\r\n  ];\r\n\r\n  containerizationOptions = [\r\n    { id: 'docker', label: 'Docker Containers' },\r\n    { id: 'docker-compose', label: 'Docker Compose' },\r\n    { id: 'kubernetes', label: 'Kubernetes Deployment' },\r\n    { id: 'nginx', label: 'Nginx Reverse Proxy' }\r\n  ];\r\n\r\n  qualityOptions = [\r\n    { id: 'sonarqube', label: 'SonarQube Code Quality' },\r\n    { id: 'eslint', label: 'ESLint/Prettier' },\r\n    { id: 'unit-tests', label: 'Unit Test Framework' },\r\n    { id: 'integration-tests', label: 'Integration Tests' }\r\n  ];\r\n\r\n  securityOptions = [\r\n    { id: 'oauth2', label: 'OAuth2 Authentication' },\r\n    { id: 'jwt', label: 'JWT Token Management' },\r\n    { id: 'cors', label: 'CORS Configuration' },\r\n    { id: 'ssl', label: 'SSL/TLS Configuration' }\r\n  ];\r\n\r\n  isInfrastructureSelected(key: keyof WizardStateModel['infrastructure'], value: string): boolean {\r\n    return this.wizardState.infrastructure()[key].includes(value);\r\n  }\r\n\r\n  updateInfrastructure(key: keyof WizardStateModel['infrastructure'], value: string) {\r\n    this.wizardState.updateInfrastructure(key, value);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./infrastructure-step.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<h2 class=\"text-2xl font-semibold mb-6\">Infrastructure & DevOps</h2>\n\n<div class=\"space-y-8\">\n  <div>\n    <label class=\"block mb-4 font-medium text-gray-700\">CI/CD Pipeline</label>\n    <div class=\"checkbox-group\">\n      @for (item of ciCdOptions; track item.id) {\n        <div class=\"checkbox-item\"\n             [class.border-purple-500]=\"isInfrastructureSelected('ci_cd', item.id)\"\n             [class.bg-purple-50]=\"isInfrastructureSelected('ci_cd', item.id)\"\n             (click)=\"updateInfrastructure('ci_cd', item.id)\">\n          <input type=\"checkbox\" [id]=\"item.id\" [value]=\"item.id\" [checked]=\"isInfrastructureSelected('ci_cd', item.id)\" class=\"mr-3 h-5 w-5 text-purple-600 focus:ring-purple-500 border-gray-300 rounded\">\n          <label [for]=\"item.id\" class=\"text-gray-700\">{{ item.label }}</label>\n        </div>\n      }\n    </div>\n  </div>\n\n  <div>\n    <label class=\"block mb-4 font-medium text-gray-700\">Containerization</label>\n    <div class=\"checkbox-group\">\n      @for (item of containerizationOptions; track item.id) {\n        <div class=\"checkbox-item\"\n             [class.border-purple-500]=\"isInfrastructureSelected('containerization', item.id)\"\n             [class.bg-purple-50]=\"isInfrastructureSelected('containerization', item.id)\"\n             (click)=\"updateInfrastructure('containerization', item.id)\">\n          <input type=\"checkbox\" [id]=\"item.id\" [value]=\"item.id\" [checked]=\"isInfrastructureSelected('containerization', item.id)\" class=\"mr-3 h-5 w-5 text-purple-600 focus:ring-purple-500 border-gray-300 rounded\">\n          <label [for]=\"item.id\" class=\"text-gray-700\">{{ item.label }}</label>\n        </div>\n      }\n    </div>\n  </div>\n\n  <div>\n    <label class=\"block mb-4 font-medium text-gray-700\">Quality & Compliance</label>\n    <div class=\"checkbox-group\">\n      @for (item of qualityOptions; track item.id) {\n        <div class=\"checkbox-item\"\n             [class.border-purple-500]=\"isInfrastructureSelected('quality', item.id)\"\n             [class.bg-purple-50]=\"isInfrastructureSelected('quality', item.id)\"\n             (click)=\"updateInfrastructure('quality', item.id)\">\n          <input type=\"checkbox\" [id]=\"item.id\" [value]=\"item.id\" [checked]=\"isInfrastructureSelected('quality', item.id)\" class=\"mr-3 h-5 w-5 text-purple-600 focus:ring-purple-500 border-gray-300 rounded\">\n          <label [for]=\"item.id\" class=\"text-gray-700\">{{ item.label }}</label>\n        </div>\n      }\n    </div>\n  </div>\n\n  <div>\n    <label class=\"block mb-4 font-medium text-gray-700\">Security Features</label>\n    <div class=\"checkbox-group\">\n      @for (item of securityOptions; track item.id) {\n        <div class=\"checkbox-item\"\n             [class.border-purple-500]=\"isInfrastructureSelected('security', item.id)\"\n             [class.bg-purple-50]=\"isInfrastructureSelected('security', item.id)\"\n             (click)=\"updateInfrastructure('security', item.id)\">\n          <input type=\"checkbox\" [id]=\"item.id\" [value]=\"item.id\" [checked]=\"isInfrastructureSelected('security', item.id)\" class=\"mr-3 h-5 w-5 text-purple-600 focus:ring-purple-500 border-gray-300 rounded\">\n          <label [for]=\"item.id\" class=\"text-gray-700\">{{ item.label }}</label>\n        </div>\n      }\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "LandingPage",
            "id": "component-LandingPage-bd8a13f00cbba9d528615cf468f60dc3b9fecac77184eae511d014c8763668eb70b8c216e09484f178300682f6ddac9b7c8888d9007211061b113777b5c36c9f",
            "file": "src/app/pages/landing-page/landing-page.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-landing-page",
            "styleUrls": [
                "./landing-page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./landing-page.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "navigateToWizard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-landing-page',\n  templateUrl: './landing-page.html',\n  styleUrls: ['./landing-page.scss'],\n  imports: [CommonModule],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LandingPage {\n  router = inject(Router);\n\n  navigateToWizard() {\n    this.router.navigate(['/wizard']);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".landing-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  text-align: center;\n  background-color: #f0f2f5;\n}\n\n.landing-content {\n  max-width: 600px;\n}\n",
                    "styleUrl": "./landing-page.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"bg-gray-900 text-white min-h-screen\">\n  <div class=\"container mx-auto px-6 py-12\">\n    <div class=\"text-center\">\n      <h1 class=\"text-5xl font-extrabold mb-4\">Skelify</h1>\n      <p class=\"text-xl text-gray-400 mb-8\">\n        Accelerate your development lifecycle with intelligent project skeleton generator\n      </p>\n      <button class=\"btn btn-primary\" (click)=\"navigateToWizard()\">\n        Get Started\n      </button>\n    </div>\n\n    <div class=\"mt-20\">\n      <div class=\"grid md:grid-cols-2 lg:grid-cols-3 gap-10\">\n        <div class=\"bg-gray-800 p-8 rounded-lg\">\n          <div class=\"text-3xl mb-4\">✨</div>\n          <h3 class=\"text-2xl font-bold mb-2\">Configurable</h3>\n          <p class=\"text-gray-400\">\n            Set all your project information like project name, description, naming convention.\n          </p>\n        </div>\n        <div class=\"bg-gray-800 p-8 rounded-lg\">\n          <div class=\"text-3xl mb-4\">🔧</div>\n          <h3 class=\"text-2xl font-bold mb-2\">Technology Stack</h3>\n          <p class=\"text-gray-400\">\n            Choose your technologies to build your stack on frontend, backend or mobile.\n          </p>\n        </div>\n        <div class=\"bg-gray-800 p-8 rounded-lg\">\n          <div class=\"text-3xl mb-4\">🔒</div>\n          <h3 class=\"text-2xl font-bold mb-2\">Infrastructure</h3>\n          <p class=\"text-gray-400\">\n            Select your preferred CI/CD, containerization, and quality tools to fit your workflow.\n          </p>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"mt-20 text-center\">\n      <h2 class=\"text-4xl font-bold mb-8\">How It Works</h2>\n      <div class=\"flex flex-col md:flex-row justify-center items-center space-y-8 md:space-y-0 md:space-x-8\">\n        <div class=\"max-w-xs text-center\">\n          <div class=\"text-primary text-6xl font-bold mb-4\">1</div>\n          <h3 class=\"text-xl font-semibold mb-2\">Select Your Stack</h3>\n          <p class=\"text-gray-500\">\n            Choose your preferred technologies from the list.\n          </p>\n        </div>\n        <div class=\"text-gray-600 text-4xl mx-4\">→</div>\n        <div class=\"max-w-xs text-center\">\n          <div class=\"text-primary text-6xl font-bold mb-4\">2</div>\n          <h3 class=\"text-xl font-semibold mb-2\">Configure Infrastructure</h3>\n          <p class=\"text-gray-500\">\n            Set up your CI/CD, containerization, and quality tools.\n          </p>\n        </div>\n        <div class=\"text-gray-600 text-4xl mx-4\">→</div>\n        <div class=\"max-w-xs text-center\">\n          <div class=\"text-primary text-6xl font-bold mb-4\">3</div>\n          <h3 class=\"text-xl font-semibold mb-2\">Generate & Download</h3>\n          <p class=\"text-gray-500\">\n            Get a complete codebase skeleton in minutes.\n          </p>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</div>\n"
        },
        {
            "name": "LayoutHorizontal",
            "id": "component-LayoutHorizontal-9a4af4d4765b8bd29f54441029a2edc74a428ceaa0d40b9dc5bc92e3d1d543e4b4afabe36d7276cf163decd23b7649d8b6e5fed4b8391cbdc9877c7cf259bcf7",
            "file": "src/app/core/layout/layout-horizontal/layout-horizontal.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-layout-horizontal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./layout-horizontal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "Header"
                },
                {
                    "name": "Footer"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { Footer } from '../footer/footer';\r\nimport { Header } from '../header/header';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\n@Component({\r\n  selector: 'app-layout-horizontal',\r\n  imports: [CommonModule, Header, Footer, TranslateModule],\r\n  templateUrl: './layout-horizontal.component.html',\r\n  styleUrl: './layout-horizontal.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LayoutHorizontal {}\r\n",
            "styleUrl": "./layout-horizontal.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"layout-wrapper\">\n  <div class=\"layout-container\">\n    <!-- HEADER -->\n    <app-header></app-header>\n\n    <!-- BODY -->\n    <ng-content></ng-content>\n\n    <!-- FOOTER -->\n    <app-footer></app-footer>\n  </div>\n</div>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-21dd6eb370b4983b5c21c84d40e6f54d266a9d9af9889e6e76b35c43058bd53b3e451bad089d5adf4bea46647ba10265a2fa8cb15630398e75636307d4817fc6",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  margin: 0 auto;\n  padding: 48px 20px;\n  max-width: 600px;\n  color: #333;\n  font-size: 14px;\n  line-height: 24px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-page h2 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 0 4px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  color: inherit;\n}\n\n.storybook-page ul {\n  margin: 1em 0;\n  padding-left: 30px;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 10px;\n  border-radius: 1em;\n  background: #e7fdd8;\n  padding: 4px 12px;\n  color: #357a14;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 12px;\n}\n\n.storybook-page .tip-wrapper {\n  margin-top: 40px;\n  margin-bottom: 40px;\n  font-size: 13px;\n  line-height: 20px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 3px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ProductListPage",
            "id": "component-ProductListPage-be229fb574ec32431a500505314b393644adbbf2a3ef8c34165c52b6758c225b81c19044a13d578e1a1d811dc305e0f5eb1a7e0fff76eb58aa21f07a8cef81a0",
            "file": "src/app/pages/product-list-page/product-list-page.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-list-page",
            "styleUrls": [
                "./product-list-page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./product-list-page.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "editing",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "editProductForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "fb",
                    "defaultValue": "inject(FormBuilder)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "productForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "products",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IProduct[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "productService",
                    "defaultValue": "inject(ProductService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "cancelEditing",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createProduct",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteProduct",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProducts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "startEditing",
                    "args": [
                        {
                            "name": "product",
                            "type": "IProduct",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "IProduct",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleCompleted",
                    "args": [
                        {
                            "name": "product",
                            "type": "IProduct",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "IProduct",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateProduct",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, inject, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { IProduct } from '../../models/page/product.model';\nimport { ProductService } from '../../services/product.service';\n\n@Component({\n  selector: 'app-product-list-page',\n  templateUrl: './product-list-page.html',\n  styleUrls: ['./product-list-page.scss'],\n  imports: [CommonModule, ReactiveFormsModule, TranslateModule],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ProductListPage implements OnInit {\n  private readonly productService = inject(ProductService);\n  private readonly fb = inject(FormBuilder);\n\n  products: IProduct[] = [];\n  editing = false;\n\n  // Define reactive forms\n  productForm!: FormGroup;\n  editProductForm!: FormGroup;\n\n  ngOnInit(): void {\n    this.getProducts();\n\n    this.productForm =\n    this.fb.group({\n      name: ['', Validators.required]\n    });\n\n    const randomInt = Math.floor(Math.random() * 1000) + 1;\n    this.editProductForm = this.fb.group({\n      id: randomInt,\n      name: ['', Validators.required],\n      price: randomInt\n    });\n  }\n\n  getProducts(): void {\n    this.productService.getProducts().subscribe(products => this.products = products);\n  }\n\n  createProduct(): void {\n    if (this.productForm.invalid) return;\n\n    const randomInt = Math.floor(Math.random() * 1000) + 1;\n    const newProduct: IProduct = {\n      id: randomInt,\n      name: this.productForm.value.name,\n      price: randomInt\n    };\n\n    this.productService.createProduct(newProduct).subscribe(createdProduct => {\n      this.products.unshift(createdProduct);\n      this.productForm.reset();\n    });\n  }\n\n  deleteProduct(id: number): void {\n    this.productService.deleteProduct(id).subscribe(() => {\n      this.products = this.products.filter(product => product.id !== id);\n    });\n  }\n\n  startEditing(product: IProduct): void {\n    this.editing = true;\n    this.editProductForm.setValue({ ...product });\n  }\n\n  updateProduct(): void {\n    if (this.editProductForm.invalid) return;\n\n    const updatedProduct: IProduct = this.editProductForm.value;\n    this.productService.updateProduct(updatedProduct).subscribe(result => {\n      const index = this.products.findIndex(t => t.id === result.id);\n      if (index > -1) this.products[index] = result;\n      this.cancelEditing();\n    });\n  }\n\n  // This method has a bug\n  toggleCompleted(product: IProduct): void {\n     const updatedTodo = { ...product, completed: !product.id };\n     this.productService.updateProduct(updatedTodo).subscribe(result => {\n       const index = this.products.findIndex(t => t.id === result.id);\n       if (index > -1) this.products[index] = result;\n     });\n  }\n\n  cancelEditing(): void {\n    this.editing = false;\n    this.editProductForm.reset();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./product-list-page.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"bg-gray-900 text-white min-h-screen py-12 px-6\">\n  <div class=\"container mx-auto max-w-3xl\">\n    <!-- Page Title -->\n    <h1 class=\"text-4xl font-extrabold mb-8 text-center\" data-cy=\"product-title\">\n      {{ 'product.title' | translate }}\n    </h1>\n\n    <!-- Reactive Form -->\n    <div class=\"mb-12\">\n      <form [formGroup]=\"productForm\" (ngSubmit)=\"createProduct()\" class=\"flex gap-3\" data-cy=\"add-product-form\">\n        <input\n          type=\"text\"\n          class=\"input\"\n          [placeholder]=\"'product.placeholder' | translate\"\n          formControlName=\"name\"\n          data-cy=\"new-product-input\"\n        />\n        <button\n          type=\"submit\"\n          class=\"btn btn-primary\"\n          data-cy=\"add-product-button\"\n        >\n          {{ 'buttons.buttonAdd' | translate }}\n        </button>\n      </form>\n      @if (productForm.controls['name'].invalid && productForm.controls['name'].touched) {\n        <div class=\"mt-2 text-sm text-red-400\" data-cy=\"new-product-error\">\n          {{ 'common.required' | translate }}\n        </div>\n      }\n    </div>\n\n    <!-- List of items -->\n    <ul class=\"space-y-4\" data-cy=\"product-list\">\n      @for (product of products; track product.id) {\n        <li\n          class=\"bg-gray-800 p-4 rounded-lg flex justify-between items-center shadow-md transition hover:shadow-lg\"\n          [class.opacity-60]=\"product.id\"\n          data-cy=\"product-item\"\n        >\n          <!-- Normal View -->\n          @if (!editing || editProductForm.value.id !== product.id) {\n            <div class=\"flex items-center gap-3 flex-1\">\n              <button\n                class=\"w-6 h-6 flex items-center justify-center rounded-full border border-gray-600 text-sm\"\n                (click)=\"toggleCompleted(product)\"\n                data-cy=\"complete-product-button\"\n              >\n                <i class=\"material-icons text-purple-400\">\n                  {{ product.id ? 'check' : '' }}\n                </i>\n              </button>\n              <span\n                class=\"flex-1 text-white\"\n                [class.line-through]=\"product.id\"\n                data-cy=\"product-item-name\"\n              >\n                {{ product.name }}\n              </span>\n            </div>\n            <div class=\"flex gap-3 text-gray-400\">\n              <button (click)=\"startEditing(product)\" class=\"hover:text-purple-400\" data-cy=\"edit-product-button\">\n                <i class=\"material-icons\">edit</i>\n              </button>\n              <button (click)=\"deleteProduct(product.id)\" class=\"hover:text-red-400\" data-cy=\"delete-product-button\">\n                <i class=\"material-icons\">clear</i>\n              </button>\n            </div>\n          }\n\n          <!-- Edit Mode -->\n          @if (editing && editProductForm.value.id === product.id) {\n            <form [formGroup]=\"editProductForm\" class=\"flex flex-1 gap-3\" data-cy=\"edit-product-form\">\n              <input\n                type=\"text\"\n                class=\"input\"\n                formControlName=\"name\"\n                data-cy=\"edit-product-input\"\n              />\n              <button (click)=\"updateProduct()\" class=\"text-green-400 hover:text-green-500\" data-cy=\"save-product-button\">\n                <i class=\"material-icons\">done</i>\n              </button>\n              <button (click)=\"cancelEditing()\" class=\"text-red-400 hover:text-red-500\" data-cy=\"cancel-edit-product-button\">\n                <i class=\"material-icons\">clear</i>\n              </button>\n            </form>\n          }\n        </li>\n      }\n    </ul>\n\n    <!-- Empty State -->\n    @if (products.length === 0) {\n      <div class=\"mt-12 text-center text-gray-400\" data-cy=\"empty-product-list\">\n        <p>{{ 'common.notFound' | translate }}</p>\n      </div>\n    }\n  </div>\n</div>\n"
        },
        {
            "name": "ProfilePage",
            "id": "component-ProfilePage-25d0312d019806569c84f6a5d758057fa31ae3fb80287236d7cf0c525afa5caf0cc24818cd80c2b7a24b2bc67cf06f93394711926c7fd3ca27f2650e0b8f4f23",
            "file": "src/app/pages/profile-page/profile-page.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-profile-page",
            "styleUrls": [
                "./profile-page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./profile-page.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "oidcSecurityService",
                    "defaultValue": "inject(OidcSecurityService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "userData",
                    "defaultValue": "signal<any>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, inject, OnInit, signal } from '@angular/core';\nimport { OidcSecurityService } from 'angular-auth-oidc-client';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-profile-page',\n  templateUrl: './profile-page.html',\n  styleUrls: ['./profile-page.scss'],\n  imports: [CommonModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProfilePage implements OnInit {\n  private readonly oidcSecurityService = inject(OidcSecurityService);\n\n  userData = signal<any>(null);\n\n  ngOnInit() {\n    this.oidcSecurityService.userData$.subscribe(({ userData }) => {\n      this.userData.set(userData);\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./profile-page.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container mx-auto p-4\">\n  <h1 class=\"text-2xl font-bold mb-4\">User Profile</h1>\n\n  @if (userData()) {\n    <div class=\"bg-white shadow-md rounded-lg p-6\">\n      <pre>{{ userData() | json }}</pre>\n    </div>\n  } @else {\n    <p>Loading user data...</p>\n  }\n</div>\n"
        },
        {
            "name": "ProgressBar",
            "id": "component-ProgressBar-1ef474b37e2a8b32defa37e643ac171a0c2258bbf280040107a9501b96aafc1c2fcb01ad0c6c536d72af5282bec99296aeaa5c3da7fab9b02a4b268d11c96afa",
            "file": "src/app/components/progress-bar/progress-bar.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-progress-bar",
            "styleUrls": [
                "./progress-bar.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./progress-bar.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentStep",
                    "defaultValue": "this.wizardState.currentStep",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "progressWidth",
                    "defaultValue": "computed(() => {\r\n    return ((this.currentStep() - 1) / (this.steps().length - 1)) * 100 + '%';\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "steps",
                    "defaultValue": "this.wizardState.steps",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "wizardState",
                    "defaultValue": "inject(WizardStateService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "navigateToStep",
                    "args": [
                        {
                            "name": "step",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "step",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, computed, inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { WizardStateService } from '../../services/wizard-state';\r\n\r\n@Component({\r\n  selector: 'app-progress-bar',\r\n  templateUrl: './progress-bar.html',\r\n  styleUrls: ['./progress-bar.scss'],\r\n  imports: [CommonModule],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ProgressBar {\r\n  wizardState = inject(WizardStateService);\r\n  steps = this.wizardState.steps;\r\n  currentStep = this.wizardState.currentStep;\r\n\r\n  progressWidth = computed(() => {\r\n    return ((this.currentStep() - 1) / (this.steps().length - 1)) * 100 + '%';\r\n  });\r\n\r\n  navigateToStep(step: number) {\r\n    this.wizardState.goToStep(step);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./progress-bar.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"relative mb-12\">\n  <!-- Progress Line -->\n  <div class=\"overflow-hidden h-2 text-xs flex rounded bg-purple-200\">\n    <div [style.width]=\"progressWidth()\" class=\"shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-purple-500 transition-all duration-500\"></div>\n  </div>\n\n  <!-- Steps -->\n  <div class=\"absolute top-1/2 left-0 w-full transform -translate-y-1/2\">\n    <div class=\"flex justify-between text-xs text-gray-600\">\n      @for (step of steps(); track step.label; let i = $index) {\n        <div class=\"w-1/4 text-center\">\n          <div class=\"relative\" (click)=\"navigateToStep(i + 1)\" [class.cursor-pointer]=\"i + 1 < currentStep()\">\n            <div\n              class=\"mx-auto rounded-full h-8 w-8 flex items-center justify-center text-lg\"\n              [class.bg-purple-500]=\"i + 1 <= currentStep()\"\n              [class.text-white]=\"i + 1 <= currentStep()\"\n              [class.bg-gray-300]=\"i + 1 > currentStep()\"\n            >\n              @if (i + 1 < currentStep()) {\n                <span>&#10003;</span>\n              } @else {\n                <span>{{ i + 1 }}</span>\n              }\n            </div>\n            <div class=\"absolute top-full mt-2 w-full text-center\">{{ step.label }}</div>\n          </div>\n        </div>\n      }\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "ProjectInfoStep",
            "id": "component-ProjectInfoStep-54888fe473ccff39d905208debd91f8da10d997c3b8d833ba5f1fde2f4a85c25cc5562950f2f3bb464fd32435419391becb2b6fa2a85c995f752da37b921dcf2",
            "file": "src/app/components/project-info-step/project-info-step.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-project-info-step",
            "styleUrls": [
                "./project-info-step.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./project-info-step.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "isFormValid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "required": false
                }
            ],
            "propertiesClass": [
                {
                    "name": "fb",
                    "defaultValue": "inject(FormBuilder)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "form",
                    "defaultValue": "this.fb.group({\n    projectName: ['', Validators.required],\n    projectDescription: [''],\n    organization: [AppConstants.COMMON.COMPANY_NAME],\n    packageName: ['']\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "wizardState",
                    "defaultValue": "inject(WizardStateService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, inject, output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { WizardStateService } from '../../services/wizard-state';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport { debounceTime, startWith } from 'rxjs/operators';\nimport { AppConstants } from '../../models/constant/app-constant';\n\n@Component({\n  selector: 'app-project-info-step',\n  templateUrl: './project-info-step.html',\n  styleUrls: ['./project-info-step.scss'],\n  imports: [CommonModule, ReactiveFormsModule],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ProjectInfoStep {\n  private readonly fb = inject(FormBuilder);\n  private readonly wizardState = inject(WizardStateService);\n  isFormValid = output<boolean>();\n\n  form = this.fb.group({\n    projectName: ['', Validators.required],\n    projectDescription: [''],\n    organization: [AppConstants.COMMON.COMPANY_NAME],\n    packageName: ['']\n  });\n\n  constructor() {\n    this.form.patchValue(this.wizardState.projectInfo());\n\n    this.form.statusChanges.pipe(\n      startWith(this.form.status),\n      takeUntilDestroyed()\n    ).subscribe(status => {\n      this.isFormValid.emit(status === 'VALID');\n    });\n\n    this.form.valueChanges\n      .pipe(debounceTime(300), takeUntilDestroyed())\n      .subscribe(value => {\n        this.wizardState.updateProjectInfo({\n          projectName: value.projectName ?? '',\n          projectDescription: value.projectDescription ?? '',\n          organization: value.organization ?? '',\n          packageName: value.packageName ?? ''\n        });\n      });\n\n    this.form.get('projectName')?.valueChanges\n      .pipe(takeUntilDestroyed())\n      .subscribe(projectName => {\n        const organization = this.form.get('organization')?.value?.toLowerCase() || AppConstants.COMMON.COMPANY_NAME;\n        const packageName = `ch.${organization}.${projectName?.toLowerCase().replace(/[^a-zA-Z0-9]/g, '')}`;\n        this.form.get('packageName')?.setValue(packageName);\n      });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./project-info-step.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 26
            },
            "extends": [],
            "templateData": "<h2 class=\"text-2xl font-semibold mb-6\" data-cy=\"projectInformation\">Project Information</h2>\r\n<form [formGroup]=\"form\" class=\"space-y-6\">\r\n  <div class=\"form-group\">\r\n    <label for=\"projectName\" class=\"block mb-2 font-medium text-gray-700\" data-cy=\"projectNameLabel\">Project Name</label>\r\n    <input\r\n      id=\"projectName\"\r\n      type=\"text\"\r\n      formControlName=\"projectName\"\r\n      class=\"input\"\r\n      [class.border-red-500]=\"form.get('projectName')?.invalid && form.get('projectName')?.touched\"\r\n      placeholder=\"Enter your project name\"\r\n      data-cy=\"projectName\"\r\n      required\r\n    >\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label for=\"projectDescription\" class=\"block mb-2 font-medium text-gray-700\">Description</label>\r\n    <textarea id=\"projectDescription\" data-cy=\"projectDescription\" formControlName=\"projectDescription\" class=\"input\" rows=\"3\" placeholder=\"Describe your project...\"></textarea>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label for=\"organization\" class=\"block mb-2 font-medium text-gray-700\">Organization</label>\r\n    <input id=\"organization\" data-cy=\"organization\" type=\"text\" formControlName=\"organization\" class=\"input\" placeholder=\"ELCA\">\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label for=\"packageName\" class=\"block mb-2 font-medium text-gray-700\">Package Name</label>\r\n    <input id=\"packageName\" data-cy=\"packageName\" type=\"text\" formControlName=\"packageName\" class=\"input\" placeholder=\"com.elca.yourproject\">\r\n  </div>\r\n</form>\r\n"
        },
        {
            "name": "ReviewStep",
            "id": "component-ReviewStep-7253f2134703a14e9bdfbbc41c44b42f592f3df924986f6f6aad8a4cbaee32ae97e0ec313f7deac2820307f52ef34caa745972828d9198f141b7c9db5aa3a7b7",
            "file": "src/app/components/review-step/review-step.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-review-step",
            "styleUrls": [
                "./review-step.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./review-step.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isModalOpen",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "wizardState",
                    "defaultValue": "inject(WizardStateService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "downloadProject",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "DownloadModal"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, inject, signal } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { WizardStateService } from '../../services/wizard-state';\nimport { DownloadModal } from '../download-modal/download-modal';\n\n@Component({\n  selector: 'app-review-step',\n  templateUrl: './review-step.html',\n  styleUrls: ['./review-step.scss'],\n  imports: [CommonModule, DownloadModal],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ReviewStep {\n  wizardState = inject(WizardStateService);\n  isModalOpen = signal(false);\n\n  downloadProject() {\n    this.isModalOpen.set(true);\n  }\n\n  closeModal() {\n    this.isModalOpen.set(false);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./review-step.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"review-container p-4 sm:p-6 lg:p-8\">\n  @if (wizardState.isLoading()) {\n    <div class=\"flex flex-col items-center justify-center p-8\">\n      <div class=\"animate-spin rounded-full h-32 w-32 border-t-4 border-b-4 border-purple-500 mb-4\"></div>\n      <p class=\"text-lg font-semibold text-gray-700\">Generating your project, please wait...</p>\n    </div>\n  } @else if (wizardState.isGenerated()) {\n    <div class=\"text-center p-8 bg-green-50 rounded-lg shadow-md\">\n      <div class=\"text-6xl mb-4\">\n        <svg class=\"w-16 h-16 mx-auto text-green-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\"></path></svg>\n      </div>\n      <h2 class=\"text-3xl font-bold mb-2 text-green-800\">Project Generated!</h2>\n      <p class=\"text-lg mb-6 text-gray-600\">Congratulations! Your project is ready for download.</p>\n      <button class=\"btn btn-success\" (click)=\"downloadProject()\">\n        Download Project\n      </button>\n    </div>\n  } @else {\n    <h2 class=\"text-3xl font-bold text-center mb-8 text-gray-800\">Review Your Configuration</h2>\n    <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n\n      <!-- Project Information Card -->\n      <div class=\"bg-white rounded-xl shadow-lg p-6 hover:shadow-xl transition-shadow duration-300\">\n        <h3 class=\"text-xl font-bold mb-4 text-purple-700 border-b-2 border-purple-200 pb-2\">Project Information</h3>\n        <div class=\"space-y-3 text-gray-700\">\n          <p><strong>Project Name: </strong> <span class=\"font-mono\">{{ wizardState.projectInfo().projectName }}</span></p>\n          <p><strong>Description: </strong> <span class=\"font-mono\">{{ wizardState.projectInfo().projectDescription }}</span></p>\n          <p><strong>Organization: </strong> <span class=\"font-mono\">{{ wizardState.projectInfo().organization }}</span></p>\n          <p><strong>Package Name: </strong> <span class=\"font-mono\">{{ wizardState.projectInfo().packageName }}</span></p>\n        </div>\n      </div>\n\n      <!-- Technology Stack Card -->\n      <div class=\"bg-white rounded-xl shadow-lg p-6 hover:shadow-xl transition-shadow duration-300\">\n        <h3 class=\"text-xl font-bold mb-4 text-indigo-700 border-b-2 border-indigo-200 pb-2\">Technology Stack</h3>\n        <div class=\"space-y-3 text-gray-700\">\n          <p><strong>Backend: </strong> <span class=\"font-mono\">{{ wizardState.techStack().backend }}</span></p>\n          <p><strong>Frontend: </strong> <span class=\"font-mono\">{{ wizardState.techStack().frontend }}</span></p>\n          <p><strong>Mobile: </strong> <span class=\"font-mono\">{{ wizardState.techStack().mobile }}</span></p>\n          <p><strong>Database: </strong> <span class=\"font-mono\">{{ wizardState.techStack().database }}</span></p>\n        </div>\n      </div>\n\n      <!-- Infrastructure Card -->\n      <div class=\"bg-white rounded-xl shadow-lg p-6 hover:shadow-xl transition-shadow duration-300 md:col-span-2 lg:col-span-1\">\n        <h3 class=\"text-xl font-bold mb-4 text-teal-700 border-b-2 border-teal-200 pb-2\">Infrastructure</h3>\n        <div class=\"space-y-3 text-gray-700\">\n          <p><strong>CI/CD: </strong> <span class=\"font-mono\">{{ wizardState.infrastructure().ci_cd.join(', ') }}</span></p>\n          <p><strong>Containerization: </strong> <span class=\"font-mono\">{{ wizardState.infrastructure().containerization.join(', ') }}</span></p>\n          <p><strong>Quality: </strong> <span class=\"font-mono\">{{ wizardState.infrastructure().quality.join(', ') }}</span></p>\n          <p><strong>Security: </strong> <span class=\"font-mono\">{{ wizardState.infrastructure().security.join(', ') }}</span></p>\n        </div>\n      </div>\n\n    </div>\n  }\n</div>\n<app-download-modal [isOpen]=\"isModalOpen()\" (closeModal)=\"closeModal()\" />\n"
        },
        {
            "name": "TechStackStep",
            "id": "component-TechStackStep-34182586d2b14c7e387a2e5f5c1886fc4ad029f8a6a6e0c4f9ff5c3b70e94b6024da021550468102573b703a10279f91a5236faff5306d353a90a19ff34fb1a9",
            "file": "src/app/components/tech-stack-step/tech-stack-step.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tech-stack-step",
            "styleUrls": [
                "./tech-stack-step.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tech-stack-step.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backendTechs",
                    "defaultValue": "[\r\n    { id: 'spring-boot', name: 'Spring Boot', description: 'Java enterprise framework with OAuth2', icon: '☕' },\r\n    { id: 'node-express', name: 'Node.js + Express', description: 'JavaScript backend with JWT auth', icon: '🟢' },\r\n    { id: 'dotnet-core', name: '.NET Core', description: 'Microsoft\\'s cross-platform framework', icon: '🔷' }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "databases",
                    "defaultValue": "[\r\n    { value: 'postgresql', name: 'PostgreSQL' },\r\n    { value: 'mysql', name: 'MySQL' },\r\n    { value: 'mongodb', name: 'MongoDB' },\r\n    { value: 'oracle', name: 'Oracle' },\r\n    { value: 'sql-server', name: 'SQL Server' }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "frontendTechs",
                    "defaultValue": "[\r\n    { id: 'react', name: 'React', description: 'Modern web UI library', icon: '⚛️' },\r\n    { id: 'angular', name: 'Angular', description: 'Full-featured framework', icon: '🅰️' },\r\n    { id: 'vue', name: 'Vue.js', description: 'Progressive framework', icon: '💚' }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "mobileTechs",
                    "defaultValue": "[\r\n    { id: 'flutter', name: 'Flutter', description: 'Cross-platform mobile apps', icon: '🐦' },\r\n    { id: 'react-native', name: 'React Native', description: 'Native mobile development', icon: '📱' },\r\n    { id: 'none', name: 'No Mobile', description: 'Web-only application', icon: '❌' }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "wizardState",
                    "defaultValue": "inject(WizardStateService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "onDatabaseChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTech",
                    "args": [
                        {
                            "name": "category",
                            "type": "\"backend\" | \"frontend\" | \"mobile\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "techId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "\"backend\" | \"frontend\" | \"mobile\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "techId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { WizardStateService } from '../../services/wizard-state';\r\n\r\n@Component({\r\n  selector: 'app-tech-stack-step',\r\n  templateUrl: './tech-stack-step.html',\r\n  styleUrls: ['./tech-stack-step.scss'],\r\n  imports: [CommonModule],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TechStackStep {\r\n  wizardState = inject(WizardStateService);\r\n\r\n  backendTechs = [\r\n    { id: 'spring-boot', name: 'Spring Boot', description: 'Java enterprise framework with OAuth2', icon: '☕' },\r\n    { id: 'node-express', name: 'Node.js + Express', description: 'JavaScript backend with JWT auth', icon: '🟢' },\r\n    { id: 'dotnet-core', name: '.NET Core', description: 'Microsoft\\'s cross-platform framework', icon: '🔷' }\r\n  ];\r\n\r\n  frontendTechs = [\r\n    { id: 'react', name: 'React', description: 'Modern web UI library', icon: '⚛️' },\r\n    { id: 'angular', name: 'Angular', description: 'Full-featured framework', icon: '🅰️' },\r\n    { id: 'vue', name: 'Vue.js', description: 'Progressive framework', icon: '💚' }\r\n  ];\r\n\r\n  mobileTechs = [\r\n    { id: 'flutter', name: 'Flutter', description: 'Cross-platform mobile apps', icon: '🐦' },\r\n    { id: 'react-native', name: 'React Native', description: 'Native mobile development', icon: '📱' },\r\n    { id: 'none', name: 'No Mobile', description: 'Web-only application', icon: '❌' }\r\n  ];\r\n\r\n  databases = [\r\n    { value: 'postgresql', name: 'PostgreSQL' },\r\n    { value: 'mysql', name: 'MySQL' },\r\n    { value: 'mongodb', name: 'MongoDB' },\r\n    { value: 'oracle', name: 'Oracle' },\r\n    { value: 'sql-server', name: 'SQL Server' }\r\n  ];\r\n\r\n  updateTech(category: 'backend' | 'frontend' | 'mobile', techId: string) {\r\n    this.wizardState.updateTechStack({ [category]: techId });\r\n  }\r\n\r\n  onDatabaseChange(event: Event) {\r\n    const selectElement = event.target as HTMLSelectElement;\r\n    this.wizardState.updateTechStack({ database: selectElement.value });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./tech-stack-step.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<h2 class=\"text-2xl font-semibold mb-6\">Select Technology Stack</h2>\n\n<div class=\"space-y-8\">\n  <div>\n    <label class=\"block mb-4 font-medium text-gray-700\">Backend Framework</label>\n    <div class=\"tech-grid\">\n      @for (tech of backendTechs; track tech.id) {\n        <div class=\"tech-card\"\n             [class.border-purple-500]=\"wizardState.techStack().backend === tech.id\"\n             [class.bg-purple-50]=\"wizardState.techStack().backend === tech.id\"\n             [class.shadow-lg]=\"wizardState.techStack().backend === tech.id\"\n             (click)=\"updateTech('backend', tech.id)\">\n          <div class=\"icon text-5xl mb-3\">{{ tech.icon }}</div>\n          <h3 class=\"text-lg font-semibold mb-1\">{{ tech.name }}</h3>\n          <p class=\"text-sm text-gray-600\">{{ tech.description }}</p>\n        </div>\n      }\n    </div>\n  </div>\n\n  <div>\n    <label class=\"block mb-4 font-medium text-gray-700\">Frontend Framework</label>\n    <div class=\"tech-grid\">\n      @for (tech of frontendTechs; track tech.id) {\n        <div class=\"tech-card\"\n             [class.border-purple-500]=\"wizardState.techStack().frontend === tech.id\"\n             [class.bg-purple-50]=\"wizardState.techStack().frontend === tech.id\"\n             [class.shadow-lg]=\"wizardState.techStack().frontend === tech.id\"\n             (click)=\"updateTech('frontend', tech.id)\">\n          <div class=\"icon text-5xl mb-3\">{{ tech.icon }}</div>\n          <h3 class=\"text-lg font-semibold mb-1\">{{ tech.name }}</h3>\n          <p class=\"text-sm text-gray-600\">{{ tech.description }}</p>\n        </div>\n      }\n    </div>\n  </div>\n\n  <div>\n    <label class=\"block mb-4 font-medium text-gray-700\">Mobile Development</label>\n    <div class=\"tech-grid\">\n      @for (tech of mobileTechs; track tech.id) {\n        <div class=\"tech-card\"\n             [class.border-purple-500]=\"wizardState.techStack().mobile === tech.id\"\n             [class.bg-purple-50]=\"wizardState.techStack().mobile === tech.id\"\n             [class.shadow-lg]=\"wizardState.techStack().mobile === tech.id\"\n             (click)=\"updateTech('mobile', tech.id)\">\n          <div class=\"icon text-5xl mb-3\">{{ tech.icon }}</div>\n          <h3 class=\"text-lg font-semibold mb-1\">{{ tech.name }}</h3>\n          <p class=\"text-sm text-gray-600\">{{ tech.description }}</p>\n        </div>\n      }\n    </div>\n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"database\" class=\"block mb-2 font-medium text-gray-700\">Database</label>\n    <select id=\"database\" class=\"input\" (change)=\"onDatabaseChange($event)\">\n      <option value=\"\">Select Database</option>\n      @for (db of databases; track db.value) {\n        <option [value]=\"db.value\" [selected]=\"wizardState.techStack().database === db.value\">{{ db.name }}</option>\n      }\n    </select>\n  </div>\n</div>\n"
        },
        {
            "name": "TodoListPage",
            "id": "component-TodoListPage-9dcd4d4cafd3a0a3067115ab715180b2e6699372b8c4a15c18a7a7c55d9f55cc768a9797a9170b332d78014b4d63d663090449118663fda589fc0f7beb2f9600",
            "file": "src/app/pages/todo-list-page/todo-list-page.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-todo-list-page",
            "styleUrls": [
                "./todo-list-page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./todo-list-page.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "editing",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "editTodoForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "fb",
                    "defaultValue": "inject(FormBuilder)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "newTodoForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "todos",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITodo[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "todoService",
                    "defaultValue": "inject(TodoService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "cancelEditing",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createTodo",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteTodo",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTodos",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "startEditing",
                    "args": [
                        {
                            "name": "todo",
                            "type": "ITodo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "todo",
                            "type": "ITodo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleCompleted",
                    "args": [
                        {
                            "name": "todo",
                            "type": "ITodo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "todo",
                            "type": "ITodo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTodo",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, inject, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { TodoService } from '../../services/todo.service';\nimport { ITodo } from '../../models/page/todo.model';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@Component({\n  selector: 'app-todo-list-page',\n  templateUrl: './todo-list-page.html',\n  styleUrls: ['./todo-list-page.scss'],\n  imports: [CommonModule, ReactiveFormsModule, TranslateModule],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TodoListPage implements OnInit {\n  private readonly todoService = inject(TodoService);\n  private readonly fb = inject(FormBuilder);\n\n  todos: ITodo[] = [];\n  editing = false;\n\n  // Define reactive forms\n  newTodoForm!: FormGroup;\n  editTodoForm!: FormGroup;\n\n  ngOnInit(): void {\n    this.getTodos();\n\n    this.newTodoForm =\n    this.fb.group({\n      title: ['', Validators.required]\n    });\n\n    this.editTodoForm = this.fb.group({\n      id: [''],\n      title: ['', Validators.required],\n      completed: [false],\n      createdAt: [new Date()]\n    });\n  }\n\n  getTodos(): void {\n    this.todoService.getTodos().subscribe(todos => this.todos = todos);\n  }\n\n  createTodo(): void {\n    if (this.newTodoForm.invalid) return;\n\n    const newTodo: ITodo = {\n      id: '',\n      title: this.newTodoForm.value.title,\n      completed: false,\n      createdAt: new Date()\n    };\n\n    this.todoService.createTodo(newTodo).subscribe(createdTodo => {\n      this.todos.unshift(createdTodo);\n      this.newTodoForm.reset();\n    });\n  }\n\n  deleteTodo(id: string): void {\n    this.todoService.deleteTodo(id).subscribe(() => {\n      this.todos = this.todos.filter(todo => todo.id !== id);\n    });\n  }\n\n  startEditing(todo: ITodo): void {\n    this.editing = true;\n    this.editTodoForm.setValue({ ...todo });\n  }\n\n  updateTodo(): void {\n    if (this.editTodoForm.invalid) return;\n\n    const updatedTodo: ITodo = this.editTodoForm.value;\n    this.todoService.updateTodo(updatedTodo).subscribe(result => {\n      const index = this.todos.findIndex(t => t.id === result.id);\n      if (index > -1) this.todos[index] = result;\n      this.cancelEditing();\n    });\n  }\n\n  toggleCompleted(todo: ITodo): void {\n    const updatedTodo = { ...todo, completed: !todo.completed };\n    this.todoService.updateTodo(updatedTodo).subscribe(result => {\n      const index = this.todos.findIndex(t => t.id === result.id);\n      if (index > -1) this.todos[index] = result;\n    });\n  }\n\n  cancelEditing(): void {\n    this.editing = false;\n    this.editTodoForm.reset();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./todo-list-page.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"bg-gray-900 text-white min-h-screen py-12 px-6\">\n  <div class=\"container mx-auto max-w-3xl\">\n    <!-- Page Title -->\n    <h1 class=\"text-4xl font-extrabold mb-8 text-center\" data-cy=\"todo-title\">\n      {{ 'todo.title' | translate }}\n    </h1>\n\n    <!-- Reactive Form -->\n    <div class=\"mb-12\">\n      <form [formGroup]=\"newTodoForm\" (ngSubmit)=\"createTodo()\" class=\"flex gap-3\" data-cy=\"add-todo-form\">\n        <input\n          type=\"text\"\n          class=\"input\"\n          [placeholder]=\"'todo.placeholder' | translate\"\n          formControlName=\"title\"\n          data-cy=\"new-todo-input\"\n        />\n        <button\n          type=\"submit\"\n          class=\"btn btn-primary\"\n          data-cy=\"add-todo-button\"\n        >\n          {{ 'buttons.buttonAdd' | translate }}\n        </button>\n      </form>\n      @if (newTodoForm.controls['title'].invalid && newTodoForm.controls['title'].touched) {\n        <div class=\"mt-2 text-sm text-red-400\" data-cy=\"new-todo-error\">\n          {{ 'common.required' | translate }}\n        </div>\n      }\n    </div>\n\n    <!-- List of items -->\n    <ul class=\"space-y-4\" data-cy=\"todo-list\">\n      @for (todo of todos; track todo.id) {\n        <li\n          class=\"bg-gray-800 p-4 rounded-lg flex justify-between items-center shadow-md transition hover:shadow-lg\"\n          [class.opacity-60]=\"todo.completed\"\n          data-cy=\"todo-item\"\n        >\n          <!-- Normal View -->\n          @if (!editing || editTodoForm.value.id !== todo.id) {\n            <div class=\"flex items-center gap-3 flex-1\">\n              <button\n                class=\"w-6 h-6 flex items-center justify-center rounded-full border border-gray-600 text-sm\"\n                (click)=\"toggleCompleted(todo)\"\n                data-cy=\"complete-todo-button\"\n              >\n                <i class=\"material-icons text-purple-400\">\n                  {{ todo.completed ? 'check' : '' }}\n                </i>\n              </button>\n              <span\n                class=\"flex-1 text-white\"\n                [class.line-through]=\"todo.completed\"\n                data-cy=\"todo-item-title\"\n              >\n                {{ todo.title }}\n              </span>\n            </div>\n            <div class=\"flex gap-3 text-gray-400\">\n              <button (click)=\"startEditing(todo)\" class=\"hover:text-purple-400\" data-cy=\"edit-todo-button\">\n                <i class=\"material-icons\">edit</i>\n              </button>\n              <button (click)=\"deleteTodo(todo.id)\" class=\"hover:text-red-400\" data-cy=\"delete-todo-button\">\n                <i class=\"material-icons\">clear</i>\n              </button>\n            </div>\n          }\n\n          <!-- Edit Mode -->\n          @if (editing && editTodoForm.value.id === todo.id) {\n            <form [formGroup]=\"editTodoForm\" class=\"flex flex-1 gap-3\" data-cy=\"edit-todo-form\">\n              <input\n                type=\"text\"\n                class=\"input\"\n                formControlName=\"title\"\n                data-cy=\"edit-todo-input\"\n              />\n              <button (click)=\"updateTodo()\" class=\"text-green-400 hover:text-green-500\" data-cy=\"save-todo-button\">\n                <i class=\"material-icons\">done</i>\n              </button>\n              <button (click)=\"cancelEditing()\" class=\"text-red-400 hover:text-red-500\" data-cy=\"cancel-edit-todo-button\">\n                <i class=\"material-icons\">clear</i>\n              </button>\n            </form>\n          }\n        </li>\n      }\n    </ul>\n\n    <!-- Empty State -->\n    @if (todos.length === 0) {\n      <div class=\"mt-12 text-center text-gray-400\" data-cy=\"empty-todo-list\">\n        <p>{{ 'common.notFound' | translate }}</p>\n      </div>\n    }\n  </div>\n</div>\n"
        },
        {
            "name": "UnauthorizedPage",
            "id": "component-UnauthorizedPage-5c672ce20207241386b5904ae7727f488590f1f14340f2c2308395114eb9ef059cdda3b483888ee275fe5b629c92e32c51469c960c9daeabdb27d14b36620da5",
            "file": "src/app/pages/unauthorized-page/unauthorized-page.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-unauthorized-page",
            "styleUrls": [
                "./unauthorized-page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./unauthorized-page.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-unauthorized-page',\n  templateUrl: './unauthorized-page.html',\n  styleUrls: ['./unauthorized-page.scss'],\n  imports: [CommonModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class UnauthorizedPage {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".unauthorized-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n  text-align: center;\r\n  background-color: #f0f2f5;\r\n}\r\n\r\n.unauthorized-content {\r\n  max-width: 600px;\r\n}\r\n",
                    "styleUrl": "./unauthorized-page.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"flex justify-center items-center h-screen text-center bg-gray-100\">\n  <div class=\"max-w-xl\">\n    <h1 class=\"text-5xl font-bold mb-4\">Unauthorized</h1>\n    <p class=\"text-xl mb-8\">You are not authorized to view this page.</p>\n  </div>\n</div>\n"
        },
        {
            "name": "WizardPage",
            "id": "component-WizardPage-6cda67591f744a3ceca4ed5b684d55b80477ccc74c550563ab043ff01d1a40bd258aca74d53e39026ede5575a12a63fa136c9565fc90560c3111a2b8abf27822",
            "file": "src/app/pages/wizard-page/wizard-page.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-wizard-page",
            "styleUrls": [
                "./wizard-page.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./wizard-page.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isProjectInfoFormValid",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "wizardState",
                    "defaultValue": "inject(WizardStateService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "handleNextStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "previousStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ProgressBar"
                },
                {
                    "name": "ProjectInfoStep"
                },
                {
                    "name": "TechStackStep"
                },
                {
                    "name": "InfrastructureStep"
                },
                {
                    "name": "ReviewStep"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, inject, signal } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { WizardStateService } from '../../services/wizard-state';\r\nimport { ProgressBar } from '../../components/progress-bar/progress-bar';\r\nimport { ProjectInfoStep } from '../../components/project-info-step/project-info-step';\r\nimport { TechStackStep } from '../../components/tech-stack-step/tech-stack-step';\r\nimport { InfrastructureStep } from '../../components/infrastructure-step/infrastructure-step';\r\nimport { ReviewStep } from '../../components/review-step/review-step';\r\n\r\n@Component({\r\n  selector: 'app-wizard-page',\r\n  templateUrl: './wizard-page.html',\r\n  styleUrls: ['./wizard-page.scss'],\r\n  imports: [\r\n    CommonModule,\r\n    ProgressBar,\r\n    ProjectInfoStep,\r\n    TechStackStep,\r\n    InfrastructureStep,\r\n    ReviewStep\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class WizardPage {\r\n  wizardState = inject(WizardStateService);\r\n  isProjectInfoFormValid = signal(false);\r\n\r\n  handleNextStep() {\r\n    if (this.wizardState.isLastStep()) {\r\n      this.wizardState.simulate();\r\n    } else {\r\n      this.wizardState.nextStep();\r\n    }\r\n  }\r\n\r\n  previousStep() {\r\n    this.wizardState.previousStep();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./wizard-page.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"p-10\">\r\n\r\n  <!--\r\n  <div class=\"text-center mb-8\">\r\n    <h1 class=\"text-4xl font-bold mb-2\">Skelify - Smart Skeleton Generator</h1>\r\n    <p class=\"text-lg opacity-90\">Accelerate your development lifecycle with intelligent project skeleton</p>\r\n  </div>\r\n  -->\r\n\r\n  <app-progress-bar />\r\n\r\n  <div class=\"bg-white rounded-lg shadow-md p-8 mb-8\">\r\n    @switch (wizardState.currentStep()) {\r\n      @case (1) {\r\n        <app-project-info-step (isFormValid)=\"isProjectInfoFormValid.set($event)\" />\r\n      }\r\n      @case (2) {\r\n        <app-tech-stack-step />\r\n      }\r\n      @case (3) {\r\n        <app-infrastructure-step />\r\n      }\r\n      @case (4) {\r\n        <app-review-step />\r\n      }\r\n    }\r\n  </div>\r\n\r\n  <div class=\"flex justify-between items-center\">\r\n    <button class=\"btn btn-secondary\" [class.hidden]=\"wizardState.currentStep() === 1\" (click)=\"previousStep()\">Previous</button>\r\n    <div class=\"flex-grow\"></div>\r\n    <button\r\n      class=\"btn btn-primary\"\r\n      (click)=\"handleNextStep()\"\r\n      [disabled]=\"(wizardState.currentStep() === 1 && !isProjectInfoFormValid()) || wizardState.isLoading()\"\r\n    >\r\n      @if (wizardState.isLastStep()) {\r\n        <span>Generate</span>\r\n      } @else {\r\n        <span>Next</span>\r\n      }\r\n    </button>\r\n  </div>\r\n</div>\r\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "ADMIN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/core/auth.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'ROLE_ADMIN'"
            },
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideBrowserGlobalErrorListeners(),\r\n    provideRouter(routes),\r\n    provideHttpClient(withInterceptorsFromDi()),\r\n    AppConfigService,\r\n    provideAuth(authConfig),\r\n    importProvidersFrom(TranslateModule.forRoot({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: HttpLoaderFactory,\r\n        deps: [HttpClient],\r\n      },\r\n    })),\r\n    provideAppInitializer(() => {\r\n      const appConfigService = inject(AppConfigService);\r\n      return appConfigService.loadAppConfig();\r\n    })\r\n  ]\r\n}"
            },
            {
                "name": "AppConstants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/constant/app-constant.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  COMMON: {\r\n    COMPANY_NAME: 'ELCA',\r\n    DEFAULT_LANGUAGE: 'en',\r\n    SUPPORTED_LANGUAGES: ['en', 'it'],\r\n    DEFAULT_DATE_LOCAL: 'en-US',\r\n    DEFAULT_DATE_FORMAT: 'dd.MM.yyyy'\r\n  }\r\n}"
            },
            {
                "name": "authConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/auth/auth.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "PassedInitialConfig",
                "defaultValue": "{\n  config: {\n              authority: 'http://localhost:8444/realms/skelify',\n              redirectUrl: window.location.origin,\n              postLogoutRedirectUri: window.location.origin,\n              clientId: 'skelify',\n              scope: 'openid profile email offline_access',\n              responseType: 'code',\n              silentRenew: true,\n              useRefreshToken: true,\n              renewTimeBeforeTokenExpiresInSeconds: 30,\n              logLevel: environment.production ? LogLevel.None : LogLevel.None,\n          }\n}"
            },
            {
                "name": "emailPattern",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utils/validator-utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]{3,}\\.[a-zA-Z]{2,})$/",
                "rawdescription": "**  PATTERNS  ***",
                "description": "<p>**  PATTERNS  ***</p>\n"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "GUEST",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/core/auth.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'ROLE_GUEST'"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/wizard-state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "WizardStateModel",
                "defaultValue": "{\r\n  currentStep: 1,\r\n  projectInfo: {\r\n    projectName: '',\r\n    projectDescription: '',\r\n    organization: AppConstants.COMMON.COMPANY_NAME,\r\n    packageName: ''\r\n  },\r\n  techStack: {\r\n    backend: '',\r\n    frontend: '',\r\n    mobile: '',\r\n    database: ''\r\n  },\r\n  infrastructure: {\r\n    ci_cd: ['gitlab-ci'],\r\n    containerization: ['docker', 'docker-compose', 'nginx'],\r\n    quality: ['sonarqube', 'eslint', 'unit-tests', 'integration-tests'],\r\n    security: ['oauth2', 'jwt', 'cors', 'ssl']\r\n  }\r\n}"
            },
            {
                "name": "phoneNumberPattern",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/utils/validator-utils.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/^(?:\\+(?!0)|0{1,2})[0-9\\s]{0,19}\\d$/"
            },
            {
                "name": "RoleGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/guards/role.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "(route: ActivatedRouteSnapshot) => {\n  const oidc = inject(OidcSecurityService);\n  const router = inject(Router);\n  const allowedRoles = route.data['roles'] as string[];\n\n  return oidc.getUserData().pipe(\n    map((user) => {\n      const roles = user?.role || [];\n      const allowed = roles.some((r: string) => allowedRoles.includes(r));\n      if (!allowed) router.navigate(['/']);\n      return allowed;\n    })\n  );\n}"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Routes",
                "defaultValue": "[\n  { path: '', redirectTo: 'home', pathMatch: 'full' },\n  {\n    path: 'home',\n    loadComponent: () => \"import('./pages/landing-page/landing-page').then(m => m.LandingPage)\"\n  },\n  {\n    path: 'about',\n    loadComponent: () => \"import('./pages/about-page/about-page').then(m => m.AboutPage)\"\n  },\n  {\n    path: 'todo',\n    loadComponent: () => \"import('./pages/todo-list-page/todo-list-page').then(m => m.TodoListPage)\",\n    canActivate: [autoLoginPartialRoutesGuard]\n  },\n  {\n    path: 'product',\n    loadComponent: () => \"import('./pages/product-list-page/product-list-page').then(m => m.ProductListPage)\",\n    canActivate: [autoLoginPartialRoutesGuard]\n  },\n  {\n    path: 'wizard',\n    loadComponent: () => \"import('./pages/wizard-page/wizard-page').then(m => m.WizardPage)\"\n    // canActivate: [autoLoginPartialRoutesGuard]\n  },\n  {\n    path: 'profile',\n    loadComponent: () => \"import('./pages/profile-page/profile-page').then(m => m.ProfilePage)\",\n    canActivate: [autoLoginPartialRoutesGuard, RoleGuard],\n    data: { roles: ['user'] }\n  },\n  {\n    path: 'unauthorized',\n    loadComponent: () => \"import('./pages/unauthorized-page/unauthorized-page').then(m => m.UnauthorizedPage)\"\n  }\n]"
            },
            {
                "name": "USER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/models/core/auth.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'ROLE_USER'"
            }
        ],
        "functions": [
            {
                "name": "getLatestDate",
                "file": "src/app/shared/utils/validator-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "dates",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "dates",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "HttpLoaderFactory",
                "file": "src/app/app.config.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isNonNull",
                "file": "src/app/shared/utils/validator-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "NonNullable<T>",
                "jsdoctags": [
                    {
                        "name": "value",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isValidEmail",
                "file": "src/app/shared/utils/validator-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>**  FUNCTIONS  ***</p>\n",
                "args": [
                    {
                        "name": "email",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "email",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isValidPhoneNumber",
                "file": "src/app/shared/utils/validator-utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "phoneNumber",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "phoneNumber",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "UserRoles",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": " |  | ",
                "file": "src/app/models/core/auth.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [
            {
                "name": "DATE_FORMATS",
                "childs": [
                    {
                        "name": "DAYDATE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "MONTHDATE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "FULLDATE",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/pipe/date-format.pipe.ts"
            }
        ],
        "groupedVariables": {
            "src/app/models/core/auth.model.ts": [
                {
                    "name": "ADMIN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/core/auth.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'ROLE_ADMIN'"
                },
                {
                    "name": "GUEST",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/core/auth.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'ROLE_GUEST'"
                },
                {
                    "name": "USER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/core/auth.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'ROLE_USER'"
                }
            ],
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideBrowserGlobalErrorListeners(),\r\n    provideRouter(routes),\r\n    provideHttpClient(withInterceptorsFromDi()),\r\n    AppConfigService,\r\n    provideAuth(authConfig),\r\n    importProvidersFrom(TranslateModule.forRoot({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: HttpLoaderFactory,\r\n        deps: [HttpClient],\r\n      },\r\n    })),\r\n    provideAppInitializer(() => {\r\n      const appConfigService = inject(AppConfigService);\r\n      return appConfigService.loadAppConfig();\r\n    })\r\n  ]\r\n}"
                }
            ],
            "src/app/models/constant/app-constant.ts": [
                {
                    "name": "AppConstants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/models/constant/app-constant.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  COMMON: {\r\n    COMPANY_NAME: 'ELCA',\r\n    DEFAULT_LANGUAGE: 'en',\r\n    SUPPORTED_LANGUAGES: ['en', 'it'],\r\n    DEFAULT_DATE_LOCAL: 'en-US',\r\n    DEFAULT_DATE_FORMAT: 'dd.MM.yyyy'\r\n  }\r\n}"
                }
            ],
            "src/app/core/auth/auth.config.ts": [
                {
                    "name": "authConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/auth/auth.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PassedInitialConfig",
                    "defaultValue": "{\n  config: {\n              authority: 'http://localhost:8444/realms/skelify',\n              redirectUrl: window.location.origin,\n              postLogoutRedirectUri: window.location.origin,\n              clientId: 'skelify',\n              scope: 'openid profile email offline_access',\n              responseType: 'code',\n              silentRenew: true,\n              useRefreshToken: true,\n              renewTimeBeforeTokenExpiresInSeconds: 30,\n              logLevel: environment.production ? LogLevel.None : LogLevel.None,\n          }\n}"
                }
            ],
            "src/app/shared/utils/validator-utils.ts": [
                {
                    "name": "emailPattern",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utils/validator-utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]{3,}\\.[a-zA-Z]{2,})$/",
                    "rawdescription": "**  PATTERNS  ***",
                    "description": "<p>**  PATTERNS  ***</p>\n"
                },
                {
                    "name": "phoneNumberPattern",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/utils/validator-utils.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/^(?:\\+(?!0)|0{1,2})[0-9\\s]{0,19}\\d$/"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/app/services/wizard-state.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/wizard-state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WizardStateModel",
                    "defaultValue": "{\r\n  currentStep: 1,\r\n  projectInfo: {\r\n    projectName: '',\r\n    projectDescription: '',\r\n    organization: AppConstants.COMMON.COMPANY_NAME,\r\n    packageName: ''\r\n  },\r\n  techStack: {\r\n    backend: '',\r\n    frontend: '',\r\n    mobile: '',\r\n    database: ''\r\n  },\r\n  infrastructure: {\r\n    ci_cd: ['gitlab-ci'],\r\n    containerization: ['docker', 'docker-compose', 'nginx'],\r\n    quality: ['sonarqube', 'eslint', 'unit-tests', 'integration-tests'],\r\n    security: ['oauth2', 'jwt', 'cors', 'ssl']\r\n  }\r\n}"
                }
            ],
            "src/app/shared/guards/role.guard.ts": [
                {
                    "name": "RoleGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/guards/role.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "(route: ActivatedRouteSnapshot) => {\n  const oidc = inject(OidcSecurityService);\n  const router = inject(Router);\n  const allowedRoles = route.data['roles'] as string[];\n\n  return oidc.getUserData().pipe(\n    map((user) => {\n      const roles = user?.role || [];\n      const allowed = roles.some((r: string) => allowedRoles.includes(r));\n      if (!allowed) router.navigate(['/']);\n      return allowed;\n    })\n  );\n}"
                }
            ],
            "src/app/app.routes.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Routes",
                    "defaultValue": "[\n  { path: '', redirectTo: 'home', pathMatch: 'full' },\n  {\n    path: 'home',\n    loadComponent: () => \"import('./pages/landing-page/landing-page').then(m => m.LandingPage)\"\n  },\n  {\n    path: 'about',\n    loadComponent: () => \"import('./pages/about-page/about-page').then(m => m.AboutPage)\"\n  },\n  {\n    path: 'todo',\n    loadComponent: () => \"import('./pages/todo-list-page/todo-list-page').then(m => m.TodoListPage)\",\n    canActivate: [autoLoginPartialRoutesGuard]\n  },\n  {\n    path: 'product',\n    loadComponent: () => \"import('./pages/product-list-page/product-list-page').then(m => m.ProductListPage)\",\n    canActivate: [autoLoginPartialRoutesGuard]\n  },\n  {\n    path: 'wizard',\n    loadComponent: () => \"import('./pages/wizard-page/wizard-page').then(m => m.WizardPage)\"\n    // canActivate: [autoLoginPartialRoutesGuard]\n  },\n  {\n    path: 'profile',\n    loadComponent: () => \"import('./pages/profile-page/profile-page').then(m => m.ProfilePage)\",\n    canActivate: [autoLoginPartialRoutesGuard, RoleGuard],\n    data: { roles: ['user'] }\n  },\n  {\n    path: 'unauthorized',\n    loadComponent: () => \"import('./pages/unauthorized-page/unauthorized-page').then(m => m.UnauthorizedPage)\"\n  }\n]"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/shared/utils/validator-utils.ts": [
                {
                    "name": "getLatestDate",
                    "file": "src/app/shared/utils/validator-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "dates",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "dates",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isNonNull",
                    "file": "src/app/shared/utils/validator-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "NonNullable<T>",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValidEmail",
                    "file": "src/app/shared/utils/validator-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>**  FUNCTIONS  ***</p>\n",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValidPhoneNumber",
                    "file": "src/app/shared/utils/validator-utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "phoneNumber",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "phoneNumber",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/app.config.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "src/app/app.config.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "type": "HttpClient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/shared/pipe/date-format.pipe.ts": [
                {
                    "name": "DATE_FORMATS",
                    "childs": [
                        {
                            "name": "DAYDATE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "MONTHDATE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "FULLDATE",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/pipe/date-format.pipe.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/models/core/auth.model.ts": [
                {
                    "name": "UserRoles",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": " |  | ",
                    "file": "src/app/models/core/auth.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "children": [
            {
                "name": "home",
                "kind": "route-path",
                "filename": "src/app/app.routes.ts"
            },
            {
                "name": "about",
                "kind": "route-path",
                "filename": "src/app/app.routes.ts"
            },
            {
                "name": "todo",
                "kind": "route-path",
                "filename": "src/app/app.routes.ts"
            },
            {
                "name": "product",
                "kind": "route-path",
                "filename": "src/app/app.routes.ts"
            },
            {
                "name": "wizard",
                "kind": "route-path",
                "filename": "src/app/app.routes.ts"
            },
            {
                "name": "profile",
                "kind": "route-path",
                "filename": "src/app/app.routes.ts"
            },
            {
                "name": "unauthorized",
                "kind": "route-path",
                "filename": "src/app/app.routes.ts"
            },
            {
                "name": "home",
                "kind": "route-redirect",
                "filename": "src/app/app.routes.ts"
            }
        ]
    },
    "coverage": {
        "count": 5,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.config.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.ts",
                "type": "component",
                "linktype": "component",
                "name": "App",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/download-modal/download-modal.ts",
                "type": "component",
                "linktype": "component",
                "name": "DownloadModal",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/infrastructure-step/infrastructure-step.ts",
                "type": "component",
                "linktype": "component",
                "name": "InfrastructureStep",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/progress-bar/progress-bar.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressBar",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/project-info-step/project-info-step.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectInfoStep",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/review-step/review-step.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReviewStep",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tech-stack-step/tech-stack-step.ts",
                "type": "component",
                "linktype": "component",
                "name": "TechStackStep",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/auth.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/layout/footer/footer.ts",
                "type": "component",
                "linktype": "component",
                "name": "Footer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/layout/header/header.ts",
                "type": "component",
                "linktype": "component",
                "name": "Header",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/layout/layout-horizontal/layout-horizontal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LayoutHorizontal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/constant/app-constant.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AppConstants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/core/auth.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADMIN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/core/auth.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GUEST",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/core/auth.model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "USER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/core/auth.model.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "UserRoles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/page/product.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IProduct",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/page/todo.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITodo",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/page/wizard-state.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "WizardStateModel",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/about-page/about-page.ts",
                "type": "component",
                "linktype": "component",
                "name": "AboutPage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/landing-page/landing-page.ts",
                "type": "component",
                "linktype": "component",
                "name": "LandingPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/product-list-page/product-list-page.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductListPage",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/profile-page/profile-page.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfilePage",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/todo-list-page/todo-list-page.ts",
                "type": "component",
                "linktype": "component",
                "name": "TodoListPage",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/unauthorized-page/unauthorized-page.ts",
                "type": "component",
                "linktype": "component",
                "name": "UnauthorizedPage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/wizard-page/wizard-page.ts",
                "type": "component",
                "linktype": "component",
                "name": "WizardPage",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/app-config.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppConfigService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/language.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LanguageService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/loading.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoadingService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/menu.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MenuService",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/app/services/menu.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMenuItem",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/services/product.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/services/todo.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TodoService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/services/wizard-state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WizardStateService",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/services/wizard-state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/if-logged.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "IfLoggedDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/if-role.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "IfRoleDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/guards/role.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RoleGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interceptors/handle-errors.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "HandleErrorsInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interceptors/loading.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "LoadingInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipe/custom-currency.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "CustomCurrencyPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipe/date-format.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "DateFormatPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipe/phone-number.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PhoneNumberPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipe/truncate.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "TruncatePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/validator-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getLatestDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/validator-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isNonNull",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/validator-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isValidEmail",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/shared/utils/validator-utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isValidPhoneNumber",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/utils/validator-utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "emailPattern",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/shared/utils/validator-utils.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "phoneNumberPattern",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}